'use client'

{{#if includeAnimations}}
import { forwardRef, ReactNode, HTMLAttributes } from 'react'
import { motion, HTMLMotionProps, Variants } from 'framer-motion'
{{else}}
import { forwardRef, ReactNode, HTMLAttributes } from 'react'
{{/if}}
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'
{{#ifEquals componentType "primitive"}}
import { spacing, colors } from '@/lib/design-system/tokens'
{{else}}
import { spacing, colors, animations } from '@/lib/design-system/tokens'
{{/ifEquals}}

// Component variants using CVA
const {{camelCase componentName}}Variants = cva(
  // Base styles - design system integration
  [
    'relative',
    'inline-flex',
    'items-center',
    'justify-center',
    'font-medium',
    'transition-all',
    'duration-300',
    'focus:outline-none',
    'focus-visible:ring-2',
    'focus-visible:ring-offset-2',
    'disabled:opacity-50',
    'disabled:cursor-not-allowed',
    {{#if includeAnimations}}
    'transform',
    'transition-transform',
    {{/if}}
  ],
  {
    variants: {
      variant: {
        {{#each variants}}
        {{this}}: [
          {{#ifEquals this "primary"}}
          'bg-freela',
          'text-white',
          'hover:bg-freela-600',
          'focus-visible:ring-freela',
          'shadow-md',
          'hover:shadow-lg',
          {{/ifEquals}}
          {{#ifEquals this "secondary"}}
          'bg-empresa',
          'text-white', 
          'hover:bg-empresa-800',
          'focus-visible:ring-empresa',
          'shadow-md',
          'hover:shadow-lg',
          {{/ifEquals}}
          {{#ifEquals this "outline"}}
          'border-2',
          'border-freela',
          'text-freela',
          'hover:bg-freela',
          'hover:text-white',
          'focus-visible:ring-freela',
          'bg-transparent',
          {{/ifEquals}}
          {{#ifEquals this "ghost"}}
          'text-gray-700',
          'hover:bg-gray-100',
          'focus-visible:ring-gray-400',
          'bg-transparent',
          {{/ifEquals}}
          {{#ifEquals this "gradient"}}
          'bg-gradient-to-r',
          'from-freela',
          'to-empresa',
          'text-white',
          'shadow-lg',
          'hover:shadow-xl',
          'focus-visible:ring-freela',
          {{/ifEquals}}
          {{#ifEquals this "default"}}
          'bg-gray-100',
          'text-gray-900',
          'hover:bg-gray-200',
          'focus-visible:ring-gray-400',
          {{/ifEquals}}
        ],
        {{/each}}
      },
      size: {
        {{#each sizes}}
        {{this}}: [
          {{#ifEquals this "xs"}}
          'px-2.5', 'py-1.5', 'text-xs', 'gap-1'
          {{/ifEquals}}
          {{#ifEquals this "sm"}}
          'px-3', 'py-2', 'text-sm', 'gap-1.5'
          {{/ifEquals}}
          {{#ifEquals this "md"}}
          'px-5', 'py-2.5', 'text-base', 'gap-2'
          {{/ifEquals}}
          {{#ifEquals this "lg"}}
          'px-6', 'py-3', 'text-lg', 'gap-2.5'
          {{/ifEquals}}
          {{#ifEquals this "xl"}}
          'px-8', 'py-4', 'text-xl', 'gap-3'
          {{/ifEquals}}
        ],
        {{/each}}
      },
      {{#if includeAnimations}}
      animation: {
        none: '',
        scale: 'hover:scale-105 active:scale-95',
        pulse: 'animate-pulse',
        bounce: 'hover:animate-bounce',
      },
      {{/if}}
      fullWidth: {
        true: 'w-full',
        false: 'w-auto',
      },
    },
    defaultVariants: {
      variant: '{{variants.[0]}}',
      size: '{{sizes.[0]}}',
      {{#if includeAnimations}}
      animation: 'scale',
      {{/if}}
      fullWidth: false,
    },
  }
)

{{#if includeAnimations}}
// Animation variants for Framer Motion
const motionVariants: Variants = {
  initial: { opacity: 0, scale: 0.95 },
  animate: { 
    opacity: 1, 
    scale: 1,
    transition: {
      duration: 0.2,
      ease: "easeOut"
    }
  },
  hover: { 
    scale: 1.05,
    transition: {
      duration: 0.2,
      ease: "easeInOut"
    }
  },
  tap: { scale: 0.95 },
}
{{/if}}

// Component props interface with design tokens
interface {{componentName}}Props extends 
  {{#if includeAnimations}}
  Omit<HTMLMotionProps<'{{#ifEquals componentType "primitive"}}button{{else}}div{{/ifEquals}}'>, 'variants'>,
  {{else}}
  HTMLAttributes<HTML{{#ifEquals componentType "primitive"}}Button{{else}}Div{{/ifEquals}}Element>,
  {{/if}}
  VariantProps<typeof {{camelCase componentName}}Variants> {
  /**
   * The content to display inside the component
   */
  children?: ReactNode
  
  /**
   * Whether the component is disabled
   * @default false
   */
  disabled?: boolean
  
  /**
   * Whether the component is in a loading state
   * @default false
   */
  loading?: boolean
  
  /**
   * Custom CSS classes to apply
   */
  className?: string
  
  /**
   * Accessible label for screen readers
   */
  'aria-label'?: string
  
  {{#if includeAnimations}}
  /**
   * Whether to disable animations
   * @default false
   */
  disableAnimations?: boolean
  {{/if}}
}

/**
 * {{componentName}} - {{config.componentTypes.[componentType].description}}
 * 
 * Generated with estaff-web component generator
 * Integrated with design system tokens and best practices
 * 
 * @example
 * ```tsx
 * <{{componentName}} variant="{{variants.[0]}}" size="{{sizes.[0]}}">
 *   Hello World
 * </{{componentName}}>
 * ```
 */
const {{componentName}} = forwardRef<
  HTML{{#ifEquals componentType "primitive"}}Button{{else}}Div{{/ifEquals}}Element,
  {{componentName}}Props
>(({ 
  className,
  variant = '{{variants.[0]}}',
  size = '{{sizes.[0]}}',
  {{#if includeAnimations}}
  animation = 'scale',
  disableAnimations = false,
  {{/if}}
  fullWidth = false,
  children,
  disabled = false,
  loading = false,
  ...props 
}, ref) => {
  {{#if includeAnimations}}
  // Motion component selection
  const MotionComponent = motion.{{#ifEquals componentType "primitive"}}button{{else}}div{{/ifEquals}}
  
  // Animation props based on component state
  const animationProps = disableAnimations ? {} : {
    variants: motionVariants,
    initial: "initial",
    animate: "animate",
    whileHover: !disabled && !loading ? "hover" : undefined,
    whileTap: !disabled && !loading ? "tap" : undefined,
  }
  {{/if}}

  return (
    {{#if includeAnimations}}
    <MotionComponent
    {{else}}
    <{{#ifEquals componentType "primitive"}}button{{else}}div{{/ifEquals}}
    {{/if}}
      ref={ref}
      className={cn(
        {{camelCase componentName}}Variants({ 
          variant, 
          size, 
          {{#if includeAnimations}}
          animation,
          {{/if}}
          fullWidth 
        }),
        className
      )}
      {{#ifEquals componentType "primitive"}}
      disabled={disabled || loading}
      type="button"
      {{/ifEquals}}
      {{#if includeAnimations}}
      {...animationProps}
      {{/if}}
      {...props}
    >
      {{#if loading}}
      {/* Loading state */}
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent" />
      </div>
      <span className="opacity-0">{children}</span>
      {{else}}
      {children}
      {{/if}}
    {{#if includeAnimations}}
    </MotionComponent>
    {{else}}
    </{{#ifEquals componentType "primitive"}}button{{else}}div{{/ifEquals}}>
    {{/if}}
  )
})

{{componentName}}.displayName = '{{componentName}}'

export { {{componentName}}, type {{componentName}}Props }