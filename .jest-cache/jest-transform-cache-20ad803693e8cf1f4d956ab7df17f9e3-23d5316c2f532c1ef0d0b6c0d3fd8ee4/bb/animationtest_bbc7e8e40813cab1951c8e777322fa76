4255a6332d9c7816dcd36fefa89d590d
/**
 * Unit Tests for Design System Animation Tokens
 * Tests performance metrics, spring physics, and mathematical timing
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _animation = require("../../../lib/design-system/tokens/animation");
describe("Design System Animation Tokens", ()=>{
    describe("Animation Durations", ()=>{
        test("should have complete duration range", ()=>{
            const expectedDurations = [
                "instant",
                "fast",
                "normal",
                "slow",
                "slower",
                "slowest"
            ];
            expectedDurations.forEach((duration)=>{
                expect(_animation.durations).toHaveProperty(duration);
                expect(typeof _animation.durations[duration]).toBe("number");
            });
            // Check specific values
            expect(_animation.durations.instant).toBe(0);
            expect(_animation.durations.fast).toBe(150);
            expect(_animation.durations.normal).toBe(300);
            expect(_animation.durations.slow).toBe(500);
            expect(_animation.durations.slower).toBe(700);
            expect(_animation.durations.slowest).toBe(1000);
        });
        test("durations should increase progressively", ()=>{
            const durationValues = [
                _animation.durations.instant,
                _animation.durations.fast,
                _animation.durations.normal,
                _animation.durations.slow,
                _animation.durations.slower,
                _animation.durations.slowest
            ];
            for(let i = 0; i < durationValues.length - 1; i++){
                expect(durationValues[i + 1]).toBeGreaterThan(durationValues[i]);
            }
        });
        test("should have semantic durations for different use cases", ()=>{
            expect(_animation.durations).toHaveProperty("micro", 50) // Micro-interactions
            ;
            expect(_animation.durations).toHaveProperty("quick", 200) // Button clicks
            ;
            expect(_animation.durations).toHaveProperty("moderate", 400) // Modals
            ;
            expect(_animation.durations).toHaveProperty("deliberate", 600) // Page transitions
            ;
            expect(_animation.durations).toHaveProperty("relaxed", 800) // Lazy animations
            ;
        });
        test("should have stagger delay configurations", ()=>{
            expect(_animation.durations.stagger).toHaveProperty("fast", 50);
            expect(_animation.durations.stagger).toHaveProperty("normal", 100);
            expect(_animation.durations.stagger).toHaveProperty("slow", 150);
            // Stagger values should increase progressively
            expect(_animation.durations.stagger.normal).toBeGreaterThan(_animation.durations.stagger.fast);
            expect(_animation.durations.stagger.slow).toBeGreaterThan(_animation.durations.stagger.normal);
        });
        test("durations should be optimized for 60fps performance", ()=>{
            // Durations should be multiples of frame time (16.67ms) for smooth animations
            const frameTime = 16.67 // 1000ms / 60fps
            ;
            Object.values(_animation.durations).forEach((duration)=>{
                if (typeof duration === "number" && duration > 0) {
                    // Duration should be reasonable for smooth animation
                    expect(duration).toBeGreaterThanOrEqual(50) // Minimum perceptible
                    ;
                    expect(duration).toBeLessThanOrEqual(1200) // Maximum practical
                    ;
                }
            });
        });
    });
    describe("Easing Functions", ()=>{
        test("should have basic CSS easing functions", ()=>{
            expect(_animation.easings.linear).toBe("linear");
            expect(_animation.easings.ease).toBe("ease");
            expect(_animation.easings.easeIn).toBe("ease-in");
            expect(_animation.easings.easeOut).toBe("ease-out");
            expect(_animation.easings.easeInOut).toBe("ease-in-out");
        });
        test("should have custom cubic-bezier curves", ()=>{
            const customEasings = [
                "premium",
                "bounceIn",
                "smooth",
                "sharp"
            ];
            customEasings.forEach((easing)=>{
                expect(_animation.easings).toHaveProperty(easing);
                expect(_animation.easings[easing]).toMatch(/^cubic-bezier\([\d\.,\s-]+\)$/);
            });
            // Check specific curves
            expect(_animation.easings.premium).toBe("cubic-bezier(0.4, 0.0, 0.2, 1)");
            expect(_animation.easings.bounceIn).toBe("cubic-bezier(0.68, -0.55, 0.265, 1.55)");
        });
        test("should have spring-like easings", ()=>{
            const springEasings = [
                "spring",
                "springOut",
                "springIn"
            ];
            springEasings.forEach((easing)=>{
                expect(_animation.easings).toHaveProperty(easing);
                expect(_animation.easings[easing]).toMatch(/^cubic-bezier\([\d\.,\s-]+\)$/);
            });
        });
        test("should have power curve easings", ()=>{
            const powerEasings = [
                "power1",
                "power2",
                "power3",
                "power4"
            ];
            powerEasings.forEach((easing)=>{
                expect(_animation.easings).toHaveProperty(easing);
                expect(_animation.easings[easing]).toMatch(/^cubic-bezier\([\d\.,\s-]+\)$/);
            });
            // Power curves should have increasing aggressiveness
            // This is validated by the curve values, but we can't easily parse them
            expect(_animation.easings.power1).toBe("cubic-bezier(0.4, 0.0, 1, 1)");
            expect(_animation.easings.power4).toBe("cubic-bezier(0.86, 0.0, 1, 1)");
        });
        test("cubic-bezier values should be mathematically valid", ()=>{
            const customEasings = Object.entries(_animation.easings).filter(([key, value])=>value.startsWith("cubic-bezier"));
            customEasings.forEach(([name, curve])=>{
                const match = curve.match(/cubic-bezier\(([\d\.,\s-]+)\)/);
                if (match) {
                    const values = match[1].split(",").map((v)=>parseFloat(v.trim()));
                    // Should have 4 control points
                    expect(values).toHaveLength(4);
                    // X values should be between 0 and 1 (time must be monotonic)
                    expect(values[0]).toBeGreaterThanOrEqual(0);
                    expect(values[0]).toBeLessThanOrEqual(1);
                    expect(values[2]).toBeGreaterThanOrEqual(0);
                    expect(values[2]).toBeLessThanOrEqual(1);
                    // Y values can exceed 0-1 for bouncy effects
                    values.forEach((value)=>{
                        expect(value).toBeGreaterThanOrEqual(-2) // Reasonable lower bound
                        ;
                        expect(value).toBeLessThanOrEqual(2) // Reasonable upper bound
                        ;
                    });
                }
            });
        });
    });
    describe("Spring Physics", ()=>{
        test("should have complete spring presets", ()=>{
            const expectedSprings = [
                "wobbly",
                "stiff",
                "gentle",
                "slow",
                "molasses",
                "default",
                "bounce",
                "noWobble"
            ];
            expectedSprings.forEach((spring)=>{
                expect(_animation.springs).toHaveProperty(spring);
                const springConfig = _animation.springs[spring];
                expect(springConfig).toHaveProperty("stiffness");
                expect(springConfig).toHaveProperty("damping");
                expect(typeof springConfig.stiffness).toBe("number");
                expect(typeof springConfig.damping).toBe("number");
            });
        });
        test("spring physics values should be realistic", ()=>{
            Object.entries(_animation.springs).forEach(([name, config])=>{
                // Stiffness should be positive and reasonable
                expect(config.stiffness).toBeGreaterThan(0);
                expect(config.stiffness).toBeLessThan(1000) // Realistic upper bound
                ;
                // Damping should be positive and reasonable
                expect(config.damping).toBeGreaterThan(0);
                expect(config.damping).toBeLessThan(200) // Prevent over-damping
                ;
            // Higher stiffness should generally correlate with higher damping for stability
            // This is a general rule but not absolute
            });
        });
        test("spring presets should have appropriate characteristics", ()=>{
            // Bouncy springs should have low damping relative to stiffness
            const bounceRatio = _animation.springs.bounce.damping / _animation.springs.bounce.stiffness;
            const wobbleRatio = _animation.springs.wobbly.damping / _animation.springs.wobbly.stiffness;
            expect(bounceRatio).toBeLessThan(0.1) // Very bouncy
            ;
            expect(wobbleRatio).toBeLessThan(0.1) // Also bouncy
            ;
            // Slow/molasses should have high damping
            expect(_animation.springs.slow.damping).toBeGreaterThan(50);
            expect(_animation.springs.molasses.damping).toBeGreaterThan(100);
            // Gentle should be balanced
            const gentleRatio = _animation.springs.gentle.damping / _animation.springs.gentle.stiffness;
            expect(gentleRatio).toBeGreaterThan(0.1);
            expect(gentleRatio).toBeLessThan(0.15);
        });
    });
    describe("Keyframe Animations", ()=>{
        test("should have complete keyframe definitions", ()=>{
            const expectedKeyframes = [
                "fadeIn",
                "fadeOut",
                "fadeUp",
                "fadeDown",
                "slideInRight",
                "slideInLeft",
                "slideInUp",
                "slideInDown",
                "zoomIn",
                "zoomOut",
                "rotate",
                "pulse",
                "ping",
                "bounce",
                "float",
                "wiggle",
                "shake"
            ];
            expectedKeyframes.forEach((keyframe)=>{
                expect(_animation.keyframes).toHaveProperty(keyframe);
                const animation = _animation.keyframes[keyframe];
                expect(typeof animation).toBe("object");
                // Should have at least from/to or percentage keys
                const keys = Object.keys(animation);
                const hasFromTo = keys.includes("from") && keys.includes("to");
                const hasPercentages = keys.some((key)=>key.includes("%") || /^\d+$/.test(key));
                expect(hasFromTo || hasPercentages).toBe(true);
            });
        });
        test("fade animations should manipulate opacity correctly", ()=>{
            expect(_animation.keyframes.fadeIn.from.opacity).toBe(0);
            expect(_animation.keyframes.fadeIn.to.opacity).toBe(1);
            expect(_animation.keyframes.fadeOut.from.opacity).toBe(1);
            expect(_animation.keyframes.fadeOut.to.opacity).toBe(0);
        });
        test("slide animations should use appropriate transforms", ()=>{
            expect(_animation.keyframes.slideInRight.from.transform).toBe("translateX(100%)");
            expect(_animation.keyframes.slideInLeft.from.transform).toBe("translateX(-100%)");
            expect(_animation.keyframes.slideInUp.from.transform).toBe("translateY(100%)");
            expect(_animation.keyframes.slideInDown.from.transform).toBe("translateY(-100%)");
            // All slide animations should end at neutral position
            expect(_animation.keyframes.slideInRight.to.transform).toBe("translateX(0)");
            expect(_animation.keyframes.slideInLeft.to.transform).toBe("translateX(0)");
            expect(_animation.keyframes.slideInUp.to.transform).toBe("translateY(0)");
            expect(_animation.keyframes.slideInDown.to.transform).toBe("translateY(0)");
        });
        test("zoom animations should scale appropriately", ()=>{
            expect(_animation.keyframes.zoomIn.from.transform).toBe("scale(0.5)");
            expect(_animation.keyframes.zoomIn.to.transform).toBe("scale(1)");
            expect(_animation.keyframes.zoomOut.from.transform).toBe("scale(1)");
            expect(_animation.keyframes.zoomOut.to.transform).toBe("scale(0.5)");
        });
        test("attention animations should have proper keyframe percentages", ()=>{
            // Pulse should animate between full and partial opacity
            expect(_animation.keyframes.pulse["0%, 100%"].opacity).toBe(1);
            expect(_animation.keyframes.pulse["50%"].opacity).toBe(0.5);
            // Ping should scale up and fade out
            expect(_animation.keyframes.ping["75%, 100%"]).toEqual({
                transform: "scale(2)",
                opacity: 0
            });
            // Bounce should have proper timing functions
            expect(_animation.keyframes.bounce["0%, 100%"]).toHaveProperty("animationTimingFunction");
            expect(_animation.keyframes.bounce["50%"]).toHaveProperty("animationTimingFunction");
        });
        test("float animation should have smooth vertical movement", ()=>{
            expect(_animation.keyframes.float["0%, 100%"].transform).toBe("translateY(0)");
            expect(_animation.keyframes.float["50%"].transform).toBe("translateY(-20px)");
        });
        test("wiggle and shake should have controlled movement", ()=>{
            // Wiggle should rotate back and forth
            expect(_animation.keyframes.wiggle["0%, 100%"].transform).toBe("rotate(-3deg)");
            expect(_animation.keyframes.wiggle["50%"].transform).toBe("rotate(3deg)");
            // Shake should translate horizontally
            expect(_animation.keyframes.shake["0%, 100%"].transform).toBe("translateX(0)");
            expect(_animation.keyframes.shake["25%"].transform).toBe("translateX(-10px)");
            expect(_animation.keyframes.shake["75%"].transform).toBe("translateX(10px)");
        });
    });
    describe("Transitions", ()=>{
        test("should have base transition configurations", ()=>{
            expect(_animation.transitions.base).toBe(`all ${_animation.durations.normal}ms ${_animation.easings.premium}`);
            expect(_animation.transitions.fast).toBe(`all ${_animation.durations.fast}ms ${_animation.easings.premium}`);
            expect(_animation.transitions.slow).toBe(`all ${_animation.durations.slow}ms ${_animation.easings.premium}`);
        });
        test("should have property-specific transitions", ()=>{
            expect(_animation.transitions.opacity).toBe(`opacity ${_animation.durations.normal}ms ${_animation.easings.premium}`);
            expect(_animation.transitions.transform).toBe(`transform ${_animation.durations.normal}ms ${_animation.easings.premium}`);
            expect(_animation.transitions.shadow).toBe(`box-shadow ${_animation.durations.normal}ms ${_animation.easings.premium}`);
            // Colors transition should include multiple properties
            expect(_animation.transitions.colors).toContain("background-color");
            expect(_animation.transitions.colors).toContain("border-color");
            expect(_animation.transitions.colors).toContain("color");
        });
        test("should have utility transitions", ()=>{
            expect(_animation.transitions.all).toContain("all");
            expect(_animation.transitions.none).toBe("none");
        });
        test("transitions should use consistent timing", ()=>{
            const transitionRegex = /(\d+)ms/;
            Object.entries(_animation.transitions).forEach(([name, value])=>{
                if (name !== "none" && typeof value === "string") {
                    const match = value.match(transitionRegex);
                    if (match) {
                        const duration = parseInt(match[1]);
                        // Duration should be one of our defined durations
                        const validDurations = Object.values(_animation.durations).filter((d)=>typeof d === "number");
                        expect(validDurations).toContain(duration);
                    }
                }
            });
        });
    });
    describe("Animation Compositions", ()=>{
        test("should have entrance animations", ()=>{
            const entranceAnimations = [
                "fadeIn",
                "fadeUp",
                "slideIn",
                "zoomIn"
            ];
            entranceAnimations.forEach((animation)=>{
                expect(_animation.animations).toHaveProperty(animation);
                const animationValue = _animation.animations[animation];
                expect(animationValue).toContain(_animation.durations.normal.toString());
                expect(animationValue).toContain("ms");
            });
        });
        test("should have exit animations", ()=>{
            const exitAnimations = [
                "fadeOut",
                "slideOut",
                "zoomOut"
            ];
            exitAnimations.forEach((animation)=>{
                expect(_animation.animations).toHaveProperty(animation);
                const animationValue = _animation.animations[animation];
                // Exit animations should generally be faster
                expect(animationValue).toContain(_animation.durations.fast.toString());
            });
        });
        test("should have attention animations", ()=>{
            const attentionAnimations = [
                "pulse",
                "bounce",
                "wiggle"
            ];
            attentionAnimations.forEach((animation)=>{
                expect(_animation.animations).toHaveProperty(animation);
                const animationValue = _animation.animations[animation];
                expect(animationValue).toContain("infinite");
            });
        });
        test("should have loading animations", ()=>{
            expect(_animation.animations.spin).toContain("rotate");
            expect(_animation.animations.spin).toContain("infinite");
            expect(_animation.animations.spin).toContain("linear");
            expect(_animation.animations.ping).toContain("ping");
            expect(_animation.animations.ping).toContain("infinite");
        });
    });
    describe("Framer Motion Variants", ()=>{
        test("should have page transition variants", ()=>{
            expect(_animation.motionVariants).toHaveProperty("pageInitial");
            expect(_animation.motionVariants).toHaveProperty("pageAnimate");
            expect(_animation.motionVariants).toHaveProperty("pageExit");
            expect(_animation.motionVariants.pageInitial).toEqual({
                opacity: 0,
                y: 20
            });
            expect(_animation.motionVariants.pageAnimate).toEqual({
                opacity: 1,
                y: 0
            });
            expect(_animation.motionVariants.pageExit).toEqual({
                opacity: 0,
                y: -20
            });
        });
        test("should have modal transition variants", ()=>{
            expect(_animation.motionVariants).toHaveProperty("overlayInitial");
            expect(_animation.motionVariants).toHaveProperty("overlayAnimate");
            expect(_animation.motionVariants).toHaveProperty("overlayExit");
            expect(_animation.motionVariants).toHaveProperty("modalInitial");
            expect(_animation.motionVariants).toHaveProperty("modalAnimate");
            expect(_animation.motionVariants).toHaveProperty("modalExit");
            // Modal should scale from 0.95 to 1
            expect(_animation.motionVariants.modalInitial.scale).toBe(0.95);
            expect(_animation.motionVariants.modalAnimate.scale).toBe(1);
            expect(_animation.motionVariants.modalExit.scale).toBe(0.95);
        });
        test("should have stagger animation variants", ()=>{
            expect(_animation.motionVariants).toHaveProperty("listContainer");
            expect(_animation.motionVariants).toHaveProperty("listItem");
            const container = _animation.motionVariants.listContainer;
            expect(container.visible).toHaveProperty("transition");
            expect(container.visible.transition).toHaveProperty("staggerChildren");
            expect(container.visible.transition).toHaveProperty("delayChildren");
            const item = _animation.motionVariants.listItem;
            expect(item.hidden).toEqual({
                y: 20,
                opacity: 0
            });
            expect(item.visible).toHaveProperty("y", 0);
            expect(item.visible).toHaveProperty("opacity", 1);
            expect(item.visible.transition).toHaveProperty("type", "spring");
        });
        test("stagger timing should be reasonable", ()=>{
            const container = _animation.motionVariants.listContainer;
            const staggerChildren = container.visible.transition.staggerChildren;
            const delayChildren = container.visible.transition.delayChildren;
            expect(staggerChildren).toBeGreaterThan(0);
            expect(staggerChildren).toBeLessThan(0.5) // Not too slow
            ;
            expect(delayChildren).toBeGreaterThanOrEqual(0);
            expect(delayChildren).toBeLessThan(1) // Reasonable initial delay
            ;
        });
    });
    describe("Animation Utility Functions", ()=>{
        test("createTransition should generate valid CSS transitions", ()=>{
            const basicTransition = (0, _animation.createTransition)();
            expect(basicTransition).toBe(`all ${_animation.durations.normal}ms ${_animation.easings.premium}`);
            const customTransition = (0, _animation.createTransition)("opacity", _animation.durations.fast, _animation.easings.ease);
            expect(customTransition).toBe(`opacity ${_animation.durations.fast}ms ${_animation.easings.ease}`);
        });
        test("createTransition should handle delay parameter", ()=>{
            const delayedTransition = (0, _animation.createTransition)("transform", _animation.durations.normal, _animation.easings.premium, 100);
            expect(delayedTransition).toBe(`transform ${_animation.durations.normal}ms ${_animation.easings.premium} 100ms`);
            const noDelayTransition = (0, _animation.createTransition)("transform", _animation.durations.normal, _animation.easings.premium, 0);
            expect(noDelayTransition).toBe(`transform ${_animation.durations.normal}ms ${_animation.easings.premium}`);
        });
        test("createStaggerDelay should calculate delays correctly", ()=>{
            expect((0, _animation.createStaggerDelay)(0)).toBe(0);
            expect((0, _animation.createStaggerDelay)(1)).toBe(_animation.durations.stagger.normal);
            expect((0, _animation.createStaggerDelay)(2)).toBe(_animation.durations.stagger.normal * 2);
            expect((0, _animation.createStaggerDelay)(3, 50)).toBe(150) // 3 * 50ms
            ;
        });
        test("generateAnimationVars should create CSS custom properties", ()=>{
            const vars = (0, _animation.generateAnimationVars)();
            // Should include duration variables
            expect(vars).toHaveProperty("--ds-anim-duration-fast", "150ms");
            expect(vars).toHaveProperty("--ds-anim-duration-normal", "300ms");
            // Should include easing variables
            expect(vars).toHaveProperty("--ds-anim-ease-premium", _animation.easings.premium);
            expect(vars).toHaveProperty("--ds-anim-ease-linear", "linear");
            const varCount = Object.keys(vars).length;
            expect(varCount).toBeGreaterThan(20);
        });
        test("generateAnimationVars should accept custom prefix", ()=>{
            const vars = (0, _animation.generateAnimationVars)("--custom-anim");
            expect(vars).toHaveProperty("--custom-anim-duration-fast", "150ms");
            expect(vars).toHaveProperty("--custom-anim-ease-premium", _animation.easings.premium);
        });
    });
    describe("Performance Considerations", ()=>{
        test("animation objects should be frozen/immutable", ()=>{
            expect(Object.isFrozen(_animation.durations)).toBe(true);
            expect(Object.isFrozen(_animation.easings)).toBe(true);
            expect(Object.isFrozen(_animation.springs)).toBe(true);
            expect(Object.isFrozen(_animation.keyframes)).toBe(true);
            expect(Object.isFrozen(_animation.transitions)).toBe(true);
            expect(Object.isFrozen(_animation.animations)).toBe(true);
            expect(Object.isFrozen(_animation.motionVariants)).toBe(true);
        });
        test("durations should not exceed performance thresholds", ()=>{
            Object.values(_animation.durations).forEach((duration)=>{
                if (typeof duration === "number") {
                    // No animation should be longer than 1.2 seconds for UX
                    expect(duration).toBeLessThanOrEqual(1200);
                    // No animation should be shorter than 50ms (imperceptible)
                    if (duration > 0) {
                        expect(duration).toBeGreaterThanOrEqual(50);
                    }
                }
            });
        });
        test("animation functions should be performant", ()=>{
            const startTime = performance.now();
            for(let i = 0; i < 1000; i++){
                (0, _animation.createTransition)("opacity", _animation.durations.fast, _animation.easings.premium);
                (0, _animation.createStaggerDelay)(i % 10);
            }
            const endTime = performance.now();
            const duration = endTime - startTime;
            // Should complete 2000 calls in under 50ms
            expect(duration).toBeLessThan(50);
        });
        test("spring physics should prevent infinite oscillation", ()=>{
            Object.entries(_animation.springs).forEach(([name, config])=>{
                // Calculate damping ratio to ensure system stability
                const dampingRatio = config.damping / (2 * Math.sqrt(config.stiffness));
                // Should not be underdamped to the point of being annoying
                // Critically damped (dampingRatio = 1) or slightly underdamped is ideal
                expect(dampingRatio).toBeGreaterThan(0.1) // Prevent extreme oscillation
                ;
                // Should not be overdamped to the point of being sluggish
                expect(dampingRatio).toBeLessThan(3) // Prevent over-damping
                ;
            });
        });
    });
    describe("Type Safety", ()=>{
        test("animation types should be properly defined", ()=>{
            const duration = "normal";
            expect(_animation.durations[duration]).toBe(300);
            const easing = "premium";
            expect(_animation.easings[easing]).toBe("cubic-bezier(0.4, 0.0, 0.2, 1)");
            const spring = "default";
            expect(_animation.springs[spring]).toEqual({
                stiffness: 170,
                damping: 26
            });
            const animation = "fadeIn";
            expect(_animation.animations[animation]).toContain("fadeIn");
            const transition = "base";
            expect(_animation.transitions[transition]).toContain("all");
        });
        test("should prevent invalid animation values at compile time", ()=>{
            // These would fail TypeScript compilation if uncommented
            // @ts-expect-error
            const invalidDuration = "invalid";
            // @ts-expect-error
            const invalidEasing = "invalid";
            // @ts-expect-error
            const invalidSpring = "invalid";
        });
    });
    describe("Mathematical Validation", ()=>{
        test("duration progression should follow mathematical ratios", ()=>{
            // Check golden ratio or fibonacci-like progression in some durations
            const fastToNormal = _animation.durations.normal / _animation.durations.fast // 300/150 = 2
            ;
            const normalToSlow = _animation.durations.slow / _animation.durations.normal // 500/300 = 1.67
            ;
            expect(fastToNormal).toBeCloseTo(2, 0);
            expect(normalToSlow).toBeCloseTo(1.67, 1);
        });
        test("stagger delays should create pleasing rhythms", ()=>{
            const staggerValues = Object.values(_animation.durations.stagger);
            // Should increase by reasonable increments
            expect(_animation.durations.stagger.normal - _animation.durations.stagger.fast).toBe(50);
            expect(_animation.durations.stagger.slow - _animation.durations.stagger.normal).toBe(50);
            // Total stagger time for 5 items should be reasonable
            const fiveItemStagger = (0, _animation.createStaggerDelay)(4, _animation.durations.stagger.normal);
            expect(fiveItemStagger).toBe(400) // Should complete within 400ms
            ;
            expect(fiveItemStagger).toBeLessThan(_animation.durations.slow);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,