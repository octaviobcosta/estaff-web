d47ec0e1e6442278688c240e5a48f2be
/**
 * Unit Tests for Design System Spacing Tokens
 * Tests mathematical progression, 8px grid compliance, and responsive calculations
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _spacing = require("../../../lib/design-system/tokens/spacing");
describe("Design System Spacing Tokens", ()=>{
    describe("Base Unit and Grid System", ()=>{
        test("should use 8px as base unit", ()=>{
            expect(_spacing.BASE_UNIT).toBe(8);
        });
        test("all spacing values should follow 8px grid system", ()=>{
            Object.entries(_spacing.spacing).forEach(([key, value])=>{
                if (key === "px") {
                    expect(value).toBe("1px");
                    return;
                }
                if (key === "0") {
                    expect(value).toBe("0px");
                    return;
                }
                // Extract numeric value from pixel string
                const numericValue = parseInt(value.replace("px", ""));
                // Should be divisible by BASE_UNIT/4 (2px) for sub-pixel precision
                // or by BASE_UNIT (8px) for main grid
                const isValidGridValue = numericValue % (_spacing.BASE_UNIT / 4) === 0 || // 2px increments
                numericValue % _spacing.BASE_UNIT === 0 // 8px increments
                ;
                expect(isValidGridValue).toBe(true);
                console.log(`${key}: ${value} (${numericValue}px)`);
            });
        });
        test("spacing scale should follow mathematical progression", ()=>{
            const spacingValues = Object.entries(_spacing.spacing).filter(([key])=>key !== "px" && key !== "0").map(([key, value])=>({
                    key: parseFloat(key),
                    value: parseInt(value.replace("px", ""))
                })).sort((a, b)=>a.key - b.key);
            // Check that values increase monotonically
            for(let i = 0; i < spacingValues.length - 1; i++){
                expect(spacingValues[i + 1].value).toBeGreaterThan(spacingValues[i].value);
            }
            // Check specific calculations
            expect(_spacing.spacing["0.5"]).toBe(`${_spacing.BASE_UNIT * 0.25}px`) // 2px
            ;
            expect(_spacing.spacing["1"]).toBe(`${_spacing.BASE_UNIT * 0.5}px`) // 4px
            ;
            expect(_spacing.spacing["2"]).toBe(`${_spacing.BASE_UNIT * 1}px`) // 8px
            ;
            expect(_spacing.spacing["4"]).toBe(`${_spacing.BASE_UNIT * 2}px`) // 16px
            ;
            expect(_spacing.spacing["8"]).toBe(`${_spacing.BASE_UNIT * 4}px`) // 32px
            ;
            expect(_spacing.spacing["16"]).toBe(`${_spacing.BASE_UNIT * 8}px`) // 64px
            ;
        });
        test("should have appropriate spacing range", ()=>{
            const spacingKeys = Object.keys(_spacing.spacing).filter((key)=>key !== "px").map((key)=>parseFloat(key)).filter((key)=>!isNaN(key)).sort((a, b)=>a - b);
            // Should start from 0
            expect(spacingKeys[0]).toBe(0);
            // Should have reasonable maximum (96 = 768px)
            expect(Math.max(...spacingKeys)).toBe(96);
            // Should have enough granular options for small spacing
            expect(spacingKeys).toContain(0.5);
            expect(spacingKeys).toContain(1);
            expect(spacingKeys).toContain(2);
            expect(spacingKeys).toContain(3);
            expect(spacingKeys).toContain(4);
        });
    });
    describe("Semantic Spacing Categories", ()=>{
        test("should have all semantic spacing categories", ()=>{
            expect(_spacing.semanticSpacing).toHaveProperty("component");
            expect(_spacing.semanticSpacing).toHaveProperty("layout");
            expect(_spacing.semanticSpacing).toHaveProperty("content");
            expect(_spacing.semanticSpacing).toHaveProperty("form");
        });
        test("component spacing should follow size progression", ()=>{
            const { component } = _spacing.semanticSpacing;
            const sizes = [
                "xs",
                "sm",
                "md",
                "lg",
                "xl"
            ];
            sizes.forEach((size)=>{
                expect(component).toHaveProperty(size);
                expect(component[size]).toMatch(/^\d+px$/);
            });
            // Values should increase with size
            const values = sizes.map((size)=>parseInt(component[size].replace("px", "")));
            for(let i = 0; i < values.length - 1; i++){
                expect(values[i + 1]).toBeGreaterThan(values[i]);
            }
        });
        test("layout spacing should be appropriate for different contexts", ()=>{
            const { layout } = _spacing.semanticSpacing;
            expect(layout).toHaveProperty("section");
            expect(layout).toHaveProperty("container");
            expect(layout).toHaveProperty("grid");
            expect(layout).toHaveProperty("stack");
            // Section spacing should be largest (for visual hierarchy)
            const sectionValue = parseInt(layout.section.replace("px", ""));
            const containerValue = parseInt(layout.container.replace("px", ""));
            const gridValue = parseInt(layout.grid.replace("px", ""));
            const stackValue = parseInt(layout.stack.replace("px", ""));
            expect(sectionValue).toBeGreaterThan(containerValue);
            expect(containerValue).toBeGreaterThan(gridValue);
            expect(gridValue).toBeGreaterThanOrEqual(stackValue);
        });
        test("content spacing should be optimized for readability", ()=>{
            const { content } = _spacing.semanticSpacing;
            expect(content).toHaveProperty("paragraph");
            expect(content).toHaveProperty("heading");
            expect(content).toHaveProperty("list");
            expect(content).toHaveProperty("inline");
            // Heading spacing should be larger than paragraph for visual hierarchy
            const headingValue = parseInt(content.heading.replace("px", ""));
            const paragraphValue = parseInt(content.paragraph.replace("px", ""));
            const listValue = parseInt(content.list.replace("px", ""));
            const inlineValue = parseInt(content.inline.replace("px", ""));
            expect(headingValue).toBeGreaterThan(paragraphValue);
            expect(paragraphValue).toBeGreaterThan(listValue);
            expect(listValue).toBeGreaterThan(inlineValue);
        });
        test("form spacing should support good UX patterns", ()=>{
            const { form } = _spacing.semanticSpacing;
            expect(form).toHaveProperty("field");
            expect(form).toHaveProperty("group");
            expect(form).toHaveProperty("label");
            expect(form).toHaveProperty("help");
            // Group spacing should be larger than field for visual separation
            const groupValue = parseInt(form.group.replace("px", ""));
            const fieldValue = parseInt(form.field.replace("px", ""));
            const labelValue = parseInt(form.label.replace("px", ""));
            const helpValue = parseInt(form.help.replace("px", ""));
            expect(groupValue).toBeGreaterThan(fieldValue);
            expect(fieldValue).toBeGreaterThan(labelValue);
            expect(labelValue).toBeGreaterThan(helpValue);
        });
    });
    describe("Container Sizes and Breakpoints", ()=>{
        test("containers should have appropriate sizes", ()=>{
            const expectedContainers = [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
                "2xl",
                "3xl",
                "full",
                "prose"
            ];
            expectedContainers.forEach((size)=>{
                expect(_spacing.containers).toHaveProperty(size);
            });
            // Specific size checks
            expect(_spacing.containers.xs).toBe("320px");
            expect(_spacing.containers.sm).toBe("640px");
            expect(_spacing.containers.md).toBe("768px");
            expect(_spacing.containers.lg).toBe("1024px");
            expect(_spacing.containers.xl).toBe("1280px");
            expect(_spacing.containers["2xl"]).toBe("1536px");
            expect(_spacing.containers["3xl"]).toBe("1920px");
            expect(_spacing.containers.full).toBe("100%");
            expect(_spacing.containers.prose).toBe("65ch");
        });
        test("container sizes should increase progressively", ()=>{
            const numericContainers = [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
                "2xl",
                "3xl"
            ];
            const values = numericContainers.map((size)=>parseInt(_spacing.containers[size].replace("px", "")));
            for(let i = 0; i < values.length - 1; i++){
                expect(values[i + 1]).toBeGreaterThan(values[i]);
            }
        });
        test("breakpoints should align with containers", ()=>{
            expect(_spacing.breakpoints.xs).toBe(320);
            expect(_spacing.breakpoints.sm).toBe(640);
            expect(_spacing.breakpoints.md).toBe(768);
            expect(_spacing.breakpoints.lg).toBe(1024);
            expect(_spacing.breakpoints.xl).toBe(1280);
            expect(_spacing.breakpoints["2xl"]).toBe(1536);
        });
        test("breakpoints should be in ascending order", ()=>{
            const breakpointValues = Object.values(_spacing.breakpoints).sort((a, b)=>a - b);
            const originalValues = Object.values(_spacing.breakpoints);
            expect(originalValues).toEqual(breakpointValues);
        });
    });
    describe("Z-Index Layering", ()=>{
        test("should have complete z-index hierarchy", ()=>{
            const expectedLayers = [
                "hide",
                "base",
                "dropdown",
                "sticky",
                "overlay",
                "modal",
                "popover",
                "tooltip",
                "notification",
                "top"
            ];
            expectedLayers.forEach((layer)=>{
                expect(_spacing.zIndex).toHaveProperty(layer);
                expect(typeof _spacing.zIndex[layer]).toBe("number");
            });
        });
        test("z-index values should increase for higher layers", ()=>{
            expect(_spacing.zIndex.hide).toBeLessThan(_spacing.zIndex.base);
            expect(_spacing.zIndex.base).toBeLessThan(_spacing.zIndex.dropdown);
            expect(_spacing.zIndex.dropdown).toBeLessThan(_spacing.zIndex.sticky);
            expect(_spacing.zIndex.sticky).toBeLessThan(_spacing.zIndex.overlay);
            expect(_spacing.zIndex.overlay).toBeLessThan(_spacing.zIndex.modal);
            expect(_spacing.zIndex.modal).toBeLessThan(_spacing.zIndex.popover);
            expect(_spacing.zIndex.popover).toBeLessThan(_spacing.zIndex.tooltip);
            expect(_spacing.zIndex.tooltip).toBeLessThan(_spacing.zIndex.notification);
            expect(_spacing.zIndex.notification).toBeLessThan(_spacing.zIndex.top);
        });
        test("z-index values should have appropriate gaps", ()=>{
            const values = Object.values(_spacing.zIndex).slice(1, -1) // Exclude hide and top
            ;
            for(let i = 0; i < values.length - 1; i++){
                const gap = values[i + 1] - values[i];
                expect(gap).toBeGreaterThanOrEqual(10) // Minimum gap of 10
                ;
            }
        });
    });
    describe("Aspect Ratios", ()=>{
        test("should have common aspect ratios", ()=>{
            const expectedRatios = [
                "square",
                "video",
                "portrait",
                "landscape",
                "wide",
                "golden"
            ];
            expectedRatios.forEach((ratio)=>{
                expect(_spacing.aspectRatios).toHaveProperty(ratio);
                expect(_spacing.aspectRatios[ratio]).toMatch(/^\d+\.?\d* \/ \d+\.?\d*$/);
            });
        });
        test("aspect ratio calculations should be correct", ()=>{
            expect(_spacing.aspectRatios.square).toBe("1 / 1");
            expect(_spacing.aspectRatios.video).toBe("16 / 9");
            expect(_spacing.aspectRatios.portrait).toBe("3 / 4");
            expect(_spacing.aspectRatios.landscape).toBe("4 / 3");
            expect(_spacing.aspectRatios.wide).toBe("21 / 9");
            expect(_spacing.aspectRatios.golden).toBe("1.618 / 1");
            // Validate golden ratio approximation
            const golden = 1.618;
            expect(Math.abs(golden - 1.618)).toBeLessThan(0.001);
        });
    });
    describe("Spacing Utility Functions", ()=>{
        test("getSpacing should return correct values", ()=>{
            expect((0, _spacing.getSpacing)("0")).toBe("0px");
            expect((0, _spacing.getSpacing)("2")).toBe("8px");
            expect((0, _spacing.getSpacing)("4")).toBe("16px");
            expect((0, _spacing.getSpacing)("8")).toBe("32px");
            expect((0, _spacing.getSpacing)("px")).toBe("1px");
        });
        test("getSemanticSpacing should return semantic values", ()=>{
            expect((0, _spacing.getSemanticSpacing)("component", "md")).toBe("16px");
            expect((0, _spacing.getSemanticSpacing)("layout", "section")).toBe("80px");
            expect((0, _spacing.getSemanticSpacing)("content", "paragraph")).toBe("24px");
            expect((0, _spacing.getSemanticSpacing)("form", "field")).toBe("24px");
        });
        test("getSemanticSpacing should fall back to default", ()=>{
            expect((0, _spacing.getSemanticSpacing)("component", "invalid")).toBe("16px");
            // @ts-expect-error - Testing invalid category
            expect((0, _spacing.getSemanticSpacing)("invalid", "md")).toBe("16px");
        });
        test("responsiveSpacing should calculate scaled values", ()=>{
            const responsive = (0, _spacing.responsiveSpacing)("4") // 16px base
            ;
            expect(responsive.mobile).toBe("16px");
            expect(responsive.tablet).toBe("20px") // 16 * 1.25
            ;
            expect(responsive.desktop).toBe("24px") // 16 * 1.5
            ;
        });
        test("responsiveSpacing should accept custom scale", ()=>{
            const responsive = (0, _spacing.responsiveSpacing)("4", 2) // 16px base, 2x scale
            ;
            expect(responsive.mobile).toBe("16px");
            expect(responsive.tablet).toBe("20px") // 16 * 1.25
            ;
            expect(responsive.desktop).toBe("32px") // 16 * 2
            ;
        });
        test("generateSpacingVars should create CSS custom properties", ()=>{
            const vars = (0, _spacing.generateSpacingVars)();
            expect(vars).toHaveProperty("--ds-spacing-0", "0px");
            expect(vars).toHaveProperty("--ds-spacing-2", "8px");
            expect(vars).toHaveProperty("--ds-spacing-4", "16px");
            expect(vars).toHaveProperty("--ds-spacing-px", "1px");
            const varCount = Object.keys(vars).length;
            expect(varCount).toBeGreaterThan(30) // Should have many spacing variables
            ;
        });
        test("generateSpacingVars should accept custom prefix", ()=>{
            const vars = (0, _spacing.generateSpacingVars)("--custom-space");
            expect(vars).toHaveProperty("--custom-space-0", "0px");
            expect(vars).toHaveProperty("--custom-space-2", "8px");
        });
    });
    describe("Performance and Immutability", ()=>{
        test("spacing objects should be frozen/immutable", ()=>{
            expect(Object.isFrozen(_spacing.spacing)).toBe(true);
            expect(Object.isFrozen(_spacing.semanticSpacing)).toBe(true);
            expect(Object.isFrozen(_spacing.containers)).toBe(true);
            expect(Object.isFrozen(_spacing.breakpoints)).toBe(true);
            expect(Object.isFrozen(_spacing.zIndex)).toBe(true);
            expect(Object.isFrozen(_spacing.aspectRatios)).toBe(true);
        });
        test("spacing functions should be performant", ()=>{
            const startTime = performance.now();
            for(let i = 0; i < 1000; i++){
                (0, _spacing.getSpacing)("4");
                (0, _spacing.getSemanticSpacing)("component", "md");
                (0, _spacing.responsiveSpacing)("8");
            }
            const endTime = performance.now();
            const duration = endTime - startTime;
            // Should complete 3000 calls in under 50ms
            expect(duration).toBeLessThan(50);
        });
    });
    describe("Mathematical Validation", ()=>{
        test("spacing scale should maintain consistent ratios", ()=>{
            // Test some key ratio relationships
            const val2 = parseInt(_spacing.spacing["2"]) // 8px
            ;
            const val4 = parseInt(_spacing.spacing["4"]) // 16px
            ;
            const val8 = parseInt(_spacing.spacing["8"]) // 32px
            ;
            const val16 = parseInt(_spacing.spacing["16"]) // 64px
            ;
            expect(val4 / val2).toBe(2) // 2:1 ratio
            ;
            expect(val8 / val4).toBe(2) // 2:1 ratio
            ;
            expect(val16 / val8).toBe(2) // 2:1 ratio
            ;
        });
        test("fractional spacing should be precise", ()=>{
            expect(_spacing.spacing["0.5"]).toBe("2px") // 8 * 0.25
            ;
            expect(_spacing.spacing["1"]).toBe("4px") // 8 * 0.5
            ;
            expect(_spacing.spacing["1.5"]).toBe("6px") // Would be 8 * 0.75 if it existed
            ;
            // Check that half-unit values exist and are correct
            const halfUnit = parseInt(_spacing.spacing["1"]);
            const fullUnit = parseInt(_spacing.spacing["2"]);
            expect(fullUnit).toBe(halfUnit * 2);
        });
    });
    describe("Type Safety", ()=>{
        test("spacing token types should be properly defined", ()=>{
            const token = "4";
            expect((0, _spacing.getSpacing)(token)).toBe("16px");
            const category = "component";
            expect((0, _spacing.getSemanticSpacing)(category, "md")).toBe("16px");
            const containerSize = "lg";
            expect(_spacing.containers[containerSize]).toBe("1024px");
            const breakpoint = "md";
            expect(_spacing.breakpoints[breakpoint]).toBe(768);
        });
        test("should prevent invalid spacing values at compile time", ()=>{
            // These would fail TypeScript compilation if uncommented
            // @ts-expect-error
            const invalid1 = (0, _spacing.getSpacing)("invalid");
            // @ts-expect-error
            const invalid2 = (0, _spacing.getSemanticSpacing)("invalid", "md");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,