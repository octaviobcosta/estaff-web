{"version":3,"sources":["/mnt/c/Users/octav/Projetos/estaff-web/tests/unit/design-tokens/spacing.test.ts"],"sourcesContent":["/**\n * Unit Tests for Design System Spacing Tokens\n * Tests mathematical progression, 8px grid compliance, and responsive calculations\n */\n\nimport { \n  BASE_UNIT,\n  spacing, \n  semanticSpacing,\n  containers,\n  breakpoints,\n  zIndex,\n  aspectRatios,\n  getSpacing,\n  getSemanticSpacing,\n  responsiveSpacing,\n  generateSpacingVars,\n  type SpacingToken,\n  type SemanticSpacingCategory,\n  type ContainerSize,\n  type Breakpoint\n} from '@/lib/design-system/tokens/spacing'\n\ndescribe('Design System Spacing Tokens', () => {\n  describe('Base Unit and Grid System', () => {\n    test('should use 8px as base unit', () => {\n      expect(BASE_UNIT).toBe(8)\n    })\n\n    test('all spacing values should follow 8px grid system', () => {\n      Object.entries(spacing).forEach(([key, value]) => {\n        if (key === 'px') {\n          expect(value).toBe('1px')\n          return\n        }\n        \n        if (key === '0') {\n          expect(value).toBe('0px')\n          return\n        }\n        \n        // Extract numeric value from pixel string\n        const numericValue = parseInt(value.replace('px', ''))\n        \n        // Should be divisible by BASE_UNIT/4 (2px) for sub-pixel precision\n        // or by BASE_UNIT (8px) for main grid\n        const isValidGridValue = \n          numericValue % (BASE_UNIT / 4) === 0 || // 2px increments\n          numericValue % BASE_UNIT === 0          // 8px increments\n        \n        expect(isValidGridValue).toBe(true)\n        \n        console.log(`${key}: ${value} (${numericValue}px)`)\n      })\n    })\n\n    test('spacing scale should follow mathematical progression', () => {\n      const spacingValues = Object.entries(spacing)\n        .filter(([key]) => key !== 'px' && key !== '0')\n        .map(([key, value]) => ({\n          key: parseFloat(key),\n          value: parseInt(value.replace('px', ''))\n        }))\n        .sort((a, b) => a.key - b.key)\n      \n      // Check that values increase monotonically\n      for (let i = 0; i < spacingValues.length - 1; i++) {\n        expect(spacingValues[i + 1].value).toBeGreaterThan(spacingValues[i].value)\n      }\n      \n      // Check specific calculations\n      expect(spacing['0.5']).toBe(`${BASE_UNIT * 0.25}px`) // 2px\n      expect(spacing['1']).toBe(`${BASE_UNIT * 0.5}px`)    // 4px\n      expect(spacing['2']).toBe(`${BASE_UNIT * 1}px`)      // 8px\n      expect(spacing['4']).toBe(`${BASE_UNIT * 2}px`)      // 16px\n      expect(spacing['8']).toBe(`${BASE_UNIT * 4}px`)      // 32px\n      expect(spacing['16']).toBe(`${BASE_UNIT * 8}px`)     // 64px\n    })\n\n    test('should have appropriate spacing range', () => {\n      const spacingKeys = Object.keys(spacing)\n        .filter(key => key !== 'px')\n        .map(key => parseFloat(key))\n        .filter(key => !isNaN(key))\n        .sort((a, b) => a - b)\n      \n      // Should start from 0\n      expect(spacingKeys[0]).toBe(0)\n      \n      // Should have reasonable maximum (96 = 768px)\n      expect(Math.max(...spacingKeys)).toBe(96)\n      \n      // Should have enough granular options for small spacing\n      expect(spacingKeys).toContain(0.5)\n      expect(spacingKeys).toContain(1)\n      expect(spacingKeys).toContain(2)\n      expect(spacingKeys).toContain(3)\n      expect(spacingKeys).toContain(4)\n    })\n  })\n\n  describe('Semantic Spacing Categories', () => {\n    test('should have all semantic spacing categories', () => {\n      expect(semanticSpacing).toHaveProperty('component')\n      expect(semanticSpacing).toHaveProperty('layout')\n      expect(semanticSpacing).toHaveProperty('content')\n      expect(semanticSpacing).toHaveProperty('form')\n    })\n\n    test('component spacing should follow size progression', () => {\n      const { component } = semanticSpacing\n      const sizes = ['xs', 'sm', 'md', 'lg', 'xl']\n      \n      sizes.forEach(size => {\n        expect(component).toHaveProperty(size)\n        expect(component[size as keyof typeof component]).toMatch(/^\\d+px$/)\n      })\n      \n      // Values should increase with size\n      const values = sizes.map(size => \n        parseInt(component[size as keyof typeof component].replace('px', ''))\n      )\n      \n      for (let i = 0; i < values.length - 1; i++) {\n        expect(values[i + 1]).toBeGreaterThan(values[i])\n      }\n    })\n\n    test('layout spacing should be appropriate for different contexts', () => {\n      const { layout } = semanticSpacing\n      \n      expect(layout).toHaveProperty('section')\n      expect(layout).toHaveProperty('container')\n      expect(layout).toHaveProperty('grid')\n      expect(layout).toHaveProperty('stack')\n      \n      // Section spacing should be largest (for visual hierarchy)\n      const sectionValue = parseInt(layout.section.replace('px', ''))\n      const containerValue = parseInt(layout.container.replace('px', ''))\n      const gridValue = parseInt(layout.grid.replace('px', ''))\n      const stackValue = parseInt(layout.stack.replace('px', ''))\n      \n      expect(sectionValue).toBeGreaterThan(containerValue)\n      expect(containerValue).toBeGreaterThan(gridValue)\n      expect(gridValue).toBeGreaterThanOrEqual(stackValue)\n    })\n\n    test('content spacing should be optimized for readability', () => {\n      const { content } = semanticSpacing\n      \n      expect(content).toHaveProperty('paragraph')\n      expect(content).toHaveProperty('heading')\n      expect(content).toHaveProperty('list')\n      expect(content).toHaveProperty('inline')\n      \n      // Heading spacing should be larger than paragraph for visual hierarchy\n      const headingValue = parseInt(content.heading.replace('px', ''))\n      const paragraphValue = parseInt(content.paragraph.replace('px', ''))\n      const listValue = parseInt(content.list.replace('px', ''))\n      const inlineValue = parseInt(content.inline.replace('px', ''))\n      \n      expect(headingValue).toBeGreaterThan(paragraphValue)\n      expect(paragraphValue).toBeGreaterThan(listValue)\n      expect(listValue).toBeGreaterThan(inlineValue)\n    })\n\n    test('form spacing should support good UX patterns', () => {\n      const { form } = semanticSpacing\n      \n      expect(form).toHaveProperty('field')\n      expect(form).toHaveProperty('group')\n      expect(form).toHaveProperty('label')\n      expect(form).toHaveProperty('help')\n      \n      // Group spacing should be larger than field for visual separation\n      const groupValue = parseInt(form.group.replace('px', ''))\n      const fieldValue = parseInt(form.field.replace('px', ''))\n      const labelValue = parseInt(form.label.replace('px', ''))\n      const helpValue = parseInt(form.help.replace('px', ''))\n      \n      expect(groupValue).toBeGreaterThan(fieldValue)\n      expect(fieldValue).toBeGreaterThan(labelValue)\n      expect(labelValue).toBeGreaterThan(helpValue)\n    })\n  })\n\n  describe('Container Sizes and Breakpoints', () => {\n    test('containers should have appropriate sizes', () => {\n      const expectedContainers = ['xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', 'full', 'prose']\n      \n      expectedContainers.forEach(size => {\n        expect(containers).toHaveProperty(size)\n      })\n      \n      // Specific size checks\n      expect(containers.xs).toBe('320px')\n      expect(containers.sm).toBe('640px')\n      expect(containers.md).toBe('768px')\n      expect(containers.lg).toBe('1024px')\n      expect(containers.xl).toBe('1280px')\n      expect(containers['2xl']).toBe('1536px')\n      expect(containers['3xl']).toBe('1920px')\n      expect(containers.full).toBe('100%')\n      expect(containers.prose).toBe('65ch')\n    })\n\n    test('container sizes should increase progressively', () => {\n      const numericContainers = ['xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl']\n      const values = numericContainers.map(size => \n        parseInt(containers[size as keyof typeof containers].replace('px', ''))\n      )\n      \n      for (let i = 0; i < values.length - 1; i++) {\n        expect(values[i + 1]).toBeGreaterThan(values[i])\n      }\n    })\n\n    test('breakpoints should align with containers', () => {\n      expect(breakpoints.xs).toBe(320)\n      expect(breakpoints.sm).toBe(640)\n      expect(breakpoints.md).toBe(768)\n      expect(breakpoints.lg).toBe(1024)\n      expect(breakpoints.xl).toBe(1280)\n      expect(breakpoints['2xl']).toBe(1536)\n    })\n\n    test('breakpoints should be in ascending order', () => {\n      const breakpointValues = Object.values(breakpoints).sort((a, b) => a - b)\n      const originalValues = Object.values(breakpoints)\n      \n      expect(originalValues).toEqual(breakpointValues)\n    })\n  })\n\n  describe('Z-Index Layering', () => {\n    test('should have complete z-index hierarchy', () => {\n      const expectedLayers = [\n        'hide', 'base', 'dropdown', 'sticky', 'overlay', \n        'modal', 'popover', 'tooltip', 'notification', 'top'\n      ]\n      \n      expectedLayers.forEach(layer => {\n        expect(zIndex).toHaveProperty(layer)\n        expect(typeof zIndex[layer as keyof typeof zIndex]).toBe('number')\n      })\n    })\n\n    test('z-index values should increase for higher layers', () => {\n      expect(zIndex.hide).toBeLessThan(zIndex.base)\n      expect(zIndex.base).toBeLessThan(zIndex.dropdown)\n      expect(zIndex.dropdown).toBeLessThan(zIndex.sticky)\n      expect(zIndex.sticky).toBeLessThan(zIndex.overlay)\n      expect(zIndex.overlay).toBeLessThan(zIndex.modal)\n      expect(zIndex.modal).toBeLessThan(zIndex.popover)\n      expect(zIndex.popover).toBeLessThan(zIndex.tooltip)\n      expect(zIndex.tooltip).toBeLessThan(zIndex.notification)\n      expect(zIndex.notification).toBeLessThan(zIndex.top)\n    })\n\n    test('z-index values should have appropriate gaps', () => {\n      const values = Object.values(zIndex).slice(1, -1) // Exclude hide and top\n      \n      for (let i = 0; i < values.length - 1; i++) {\n        const gap = values[i + 1] - values[i]\n        expect(gap).toBeGreaterThanOrEqual(10) // Minimum gap of 10\n      }\n    })\n  })\n\n  describe('Aspect Ratios', () => {\n    test('should have common aspect ratios', () => {\n      const expectedRatios = ['square', 'video', 'portrait', 'landscape', 'wide', 'golden']\n      \n      expectedRatios.forEach(ratio => {\n        expect(aspectRatios).toHaveProperty(ratio)\n        expect(aspectRatios[ratio as keyof typeof aspectRatios]).toMatch(/^\\d+\\.?\\d* \\/ \\d+\\.?\\d*$/)\n      })\n    })\n\n    test('aspect ratio calculations should be correct', () => {\n      expect(aspectRatios.square).toBe('1 / 1')\n      expect(aspectRatios.video).toBe('16 / 9')\n      expect(aspectRatios.portrait).toBe('3 / 4')\n      expect(aspectRatios.landscape).toBe('4 / 3')\n      expect(aspectRatios.wide).toBe('21 / 9')\n      expect(aspectRatios.golden).toBe('1.618 / 1')\n      \n      // Validate golden ratio approximation\n      const golden = 1.618\n      expect(Math.abs(golden - 1.618)).toBeLessThan(0.001)\n    })\n  })\n\n  describe('Spacing Utility Functions', () => {\n    test('getSpacing should return correct values', () => {\n      expect(getSpacing('0')).toBe('0px')\n      expect(getSpacing('2')).toBe('8px')\n      expect(getSpacing('4')).toBe('16px')\n      expect(getSpacing('8')).toBe('32px')\n      expect(getSpacing('px')).toBe('1px')\n    })\n\n    test('getSemanticSpacing should return semantic values', () => {\n      expect(getSemanticSpacing('component', 'md')).toBe('16px')\n      expect(getSemanticSpacing('layout', 'section')).toBe('80px')\n      expect(getSemanticSpacing('content', 'paragraph')).toBe('24px')\n      expect(getSemanticSpacing('form', 'field')).toBe('24px')\n    })\n\n    test('getSemanticSpacing should fall back to default', () => {\n      expect(getSemanticSpacing('component', 'invalid')).toBe('16px')\n      // @ts-expect-error - Testing invalid category\n      expect(getSemanticSpacing('invalid', 'md')).toBe('16px')\n    })\n\n    test('responsiveSpacing should calculate scaled values', () => {\n      const responsive = responsiveSpacing('4') // 16px base\n      \n      expect(responsive.mobile).toBe('16px')\n      expect(responsive.tablet).toBe('20px') // 16 * 1.25\n      expect(responsive.desktop).toBe('24px') // 16 * 1.5\n    })\n\n    test('responsiveSpacing should accept custom scale', () => {\n      const responsive = responsiveSpacing('4', 2) // 16px base, 2x scale\n      \n      expect(responsive.mobile).toBe('16px')\n      expect(responsive.tablet).toBe('20px') // 16 * 1.25\n      expect(responsive.desktop).toBe('32px') // 16 * 2\n    })\n\n    test('generateSpacingVars should create CSS custom properties', () => {\n      const vars = generateSpacingVars()\n      \n      expect(vars).toHaveProperty('--ds-spacing-0', '0px')\n      expect(vars).toHaveProperty('--ds-spacing-2', '8px')\n      expect(vars).toHaveProperty('--ds-spacing-4', '16px')\n      expect(vars).toHaveProperty('--ds-spacing-px', '1px')\n      \n      const varCount = Object.keys(vars).length\n      expect(varCount).toBeGreaterThan(30) // Should have many spacing variables\n    })\n\n    test('generateSpacingVars should accept custom prefix', () => {\n      const vars = generateSpacingVars('--custom-space')\n      \n      expect(vars).toHaveProperty('--custom-space-0', '0px')\n      expect(vars).toHaveProperty('--custom-space-2', '8px')\n    })\n  })\n\n  describe('Performance and Immutability', () => {\n    test('spacing objects should be frozen/immutable', () => {\n      expect(Object.isFrozen(spacing)).toBe(true)\n      expect(Object.isFrozen(semanticSpacing)).toBe(true)\n      expect(Object.isFrozen(containers)).toBe(true)\n      expect(Object.isFrozen(breakpoints)).toBe(true)\n      expect(Object.isFrozen(zIndex)).toBe(true)\n      expect(Object.isFrozen(aspectRatios)).toBe(true)\n    })\n\n    test('spacing functions should be performant', () => {\n      const startTime = performance.now()\n      \n      for (let i = 0; i < 1000; i++) {\n        getSpacing('4')\n        getSemanticSpacing('component', 'md')\n        responsiveSpacing('8')\n      }\n      \n      const endTime = performance.now()\n      const duration = endTime - startTime\n      \n      // Should complete 3000 calls in under 50ms\n      expect(duration).toBeLessThan(50)\n    })\n  })\n\n  describe('Mathematical Validation', () => {\n    test('spacing scale should maintain consistent ratios', () => {\n      // Test some key ratio relationships\n      const val2 = parseInt(spacing['2'])  // 8px\n      const val4 = parseInt(spacing['4'])  // 16px\n      const val8 = parseInt(spacing['8'])  // 32px\n      const val16 = parseInt(spacing['16']) // 64px\n      \n      expect(val4 / val2).toBe(2)   // 2:1 ratio\n      expect(val8 / val4).toBe(2)   // 2:1 ratio\n      expect(val16 / val8).toBe(2)  // 2:1 ratio\n    })\n\n    test('fractional spacing should be precise', () => {\n      expect(spacing['0.5']).toBe('2px')  // 8 * 0.25\n      expect(spacing['1']).toBe('4px')    // 8 * 0.5\n      expect(spacing['1.5']).toBe('6px')  // Would be 8 * 0.75 if it existed\n      \n      // Check that half-unit values exist and are correct\n      const halfUnit = parseInt(spacing['1'])\n      const fullUnit = parseInt(spacing['2'])\n      \n      expect(fullUnit).toBe(halfUnit * 2)\n    })\n  })\n\n  describe('Type Safety', () => {\n    test('spacing token types should be properly defined', () => {\n      const token: SpacingToken = '4'\n      expect(getSpacing(token)).toBe('16px')\n      \n      const category: SemanticSpacingCategory = 'component'\n      expect(getSemanticSpacing(category, 'md')).toBe('16px')\n      \n      const containerSize: ContainerSize = 'lg'\n      expect(containers[containerSize]).toBe('1024px')\n      \n      const breakpoint: Breakpoint = 'md'\n      expect(breakpoints[breakpoint]).toBe(768)\n    })\n\n    test('should prevent invalid spacing values at compile time', () => {\n      // These would fail TypeScript compilation if uncommented\n      // @ts-expect-error\n      const invalid1 = getSpacing('invalid')\n      \n      // @ts-expect-error\n      const invalid2 = getSemanticSpacing('invalid', 'md')\n    })\n  })\n})"],"names":["describe","test","expect","BASE_UNIT","toBe","Object","entries","spacing","forEach","key","value","numericValue","parseInt","replace","isValidGridValue","console","log","spacingValues","filter","map","parseFloat","sort","a","b","i","length","toBeGreaterThan","spacingKeys","keys","isNaN","Math","max","toContain","semanticSpacing","toHaveProperty","component","sizes","size","toMatch","values","layout","sectionValue","section","containerValue","container","gridValue","grid","stackValue","stack","toBeGreaterThanOrEqual","content","headingValue","heading","paragraphValue","paragraph","listValue","list","inlineValue","inline","form","groupValue","group","fieldValue","field","labelValue","label","helpValue","help","expectedContainers","containers","xs","sm","md","lg","xl","full","prose","numericContainers","breakpoints","breakpointValues","originalValues","toEqual","expectedLayers","layer","zIndex","hide","toBeLessThan","base","dropdown","sticky","overlay","modal","popover","tooltip","notification","top","slice","gap","expectedRatios","ratio","aspectRatios","square","video","portrait","landscape","wide","golden","abs","getSpacing","getSemanticSpacing","responsive","responsiveSpacing","mobile","tablet","desktop","vars","generateSpacingVars","varCount","isFrozen","startTime","performance","now","endTime","duration","val2","val4","val8","val16","halfUnit","fullUnit","token","category","containerSize","breakpoint","invalid1","invalid2"],"mappings":"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"}