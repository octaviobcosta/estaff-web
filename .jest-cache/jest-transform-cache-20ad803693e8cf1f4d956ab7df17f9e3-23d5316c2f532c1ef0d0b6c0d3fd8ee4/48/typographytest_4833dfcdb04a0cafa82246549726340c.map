{"version":3,"sources":["/mnt/c/Users/octav/Projetos/estaff-web/tests/unit/design-tokens/typography.test.ts"],"sourcesContent":["/**\n * Unit Tests for Design System Typography Tokens\n * Tests mathematical scaling, readability, and responsive calculations\n */\n\nimport { \n  BASE_FONT_SIZE,\n  fontFamilies,\n  fontWeights,\n  fontSizes,\n  typography,\n  getTypographyStyle,\n  fluidTypography,\n  generateTypographyVars,\n  textTruncation,\n  type FontFamily,\n  type FontWeight,\n  type FontSize,\n  type TypographyCategory,\n  type HeadingLevel\n} from '@/lib/design-system/tokens/typography'\n\ndescribe('Design System Typography Tokens', () => {\n  describe('Base Typography Configuration', () => {\n    test('should use 16px as base font size', () => {\n      expect(BASE_FONT_SIZE).toBe(16)\n    })\n\n    test('should have appropriate font families', () => {\n      expect(fontFamilies.sans).toContain('var(--font-dm-sans)')\n      expect(fontFamilies.sans).toContain('system-ui')\n      expect(fontFamilies.sans).toContain('sans-serif')\n      \n      expect(fontFamilies.display).toContain('var(--font-dm-sans)')\n      expect(fontFamilies.display).toContain('system-ui')\n      \n      expect(fontFamilies.mono).toContain('Monaco')\n      expect(fontFamilies.mono).toContain('Consolas')\n      expect(fontFamilies.mono).toContain('monospace')\n    })\n\n    test('should have complete font weight scale', () => {\n      const expectedWeights = [\n        'thin', 'extralight', 'light', 'regular', 'medium', \n        'semibold', 'bold', 'extrabold', 'black'\n      ]\n      \n      expectedWeights.forEach(weight => {\n        expect(fontWeights).toHaveProperty(weight)\n        expect(typeof fontWeights[weight as keyof typeof fontWeights]).toBe('number')\n      })\n      \n      // Check specific weight values\n      expect(fontWeights.thin).toBe(100)\n      expect(fontWeights.regular).toBe(400)\n      expect(fontWeights.bold).toBe(700)\n      expect(fontWeights.black).toBe(900)\n    })\n\n    test('font weights should increase progressively', () => {\n      const weights = Object.values(fontWeights)\n      \n      for (let i = 0; i < weights.length - 1; i++) {\n        expect(weights[i + 1]).toBeGreaterThan(weights[i])\n      }\n      \n      // Check that weights are in 100-unit increments\n      weights.forEach(weight => {\n        expect(weight % 100).toBe(0)\n        expect(weight).toBeGreaterThanOrEqual(100)\n        expect(weight).toBeLessThanOrEqual(900)\n      })\n    })\n  })\n\n  describe('Font Size Mathematical Scaling', () => {\n    test('should have complete font size range', () => {\n      const expectedSizes = [\n        '2xs', 'xs', 'sm', 'base', 'lg', 'xl', \n        '2xl', '3xl', '4xl', '5xl', '6xl', '7xl', '8xl', '9xl'\n      ]\n      \n      expectedSizes.forEach(size => {\n        expect(fontSizes).toHaveProperty(size)\n        \n        const fontSize = fontSizes[size as keyof typeof fontSizes]\n        expect(fontSize).toHaveProperty('size')\n        expect(fontSize).toHaveProperty('lineHeight')\n        expect(fontSize).toHaveProperty('letterSpacing')\n        \n        // Validate size format\n        expect(fontSize.size).toMatch(/^\\d+px$/)\n        expect(typeof fontSize.lineHeight).toBe('number')\n        expect(typeof fontSize.letterSpacing).toBe('string')\n      })\n    })\n\n    test('font sizes should increase progressively', () => {\n      const sizes = Object.entries(fontSizes).map(([key, value]) => ({\n        key,\n        numericValue: parseInt(value.size.replace('px', ''))\n      }))\n      \n      // Sort by numeric value to check progression\n      sizes.sort((a, b) => a.numericValue - b.numericValue)\n      \n      for (let i = 0; i < sizes.length - 1; i++) {\n        expect(sizes[i + 1].numericValue).toBeGreaterThan(sizes[i].numericValue)\n      }\n    })\n\n    test('should follow mathematical scaling ratios', () => {\n      // Check specific size calculations\n      expect(fontSizes['2xs'].size).toBe(`${BASE_FONT_SIZE * 0.625}px`)  // 10px\n      expect(fontSizes.xs.size).toBe(`${BASE_FONT_SIZE * 0.75}px`)       // 12px\n      expect(fontSizes.sm.size).toBe(`${BASE_FONT_SIZE * 0.875}px`)      // 14px\n      expect(fontSizes.base.size).toBe(`${BASE_FONT_SIZE}px`)            // 16px\n      expect(fontSizes.lg.size).toBe(`${BASE_FONT_SIZE * 1.125}px`)      // 18px\n      expect(fontSizes.xl.size).toBe(`${BASE_FONT_SIZE * 1.25}px`)       // 20px\n      expect(fontSizes['2xl'].size).toBe(`${BASE_FONT_SIZE * 1.5}px`)    // 24px\n      expect(fontSizes['3xl'].size).toBe(`${BASE_FONT_SIZE * 1.875}px`)  // 30px\n      expect(fontSizes['4xl'].size).toBe(`${BASE_FONT_SIZE * 2.25}px`)   // 36px\n      expect(fontSizes['5xl'].size).toBe(`${BASE_FONT_SIZE * 3}px`)      // 48px\n      expect(fontSizes['6xl'].size).toBe(`${BASE_FONT_SIZE * 3.75}px`)   // 60px\n      expect(fontSizes['7xl'].size).toBe(`${BASE_FONT_SIZE * 4.5}px`)    // 72px\n      expect(fontSizes['8xl'].size).toBe(`${BASE_FONT_SIZE * 6}px`)      // 96px\n      expect(fontSizes['9xl'].size).toBe(`${BASE_FONT_SIZE * 8}px`)      // 128px\n    })\n\n    test('line heights should optimize for readability', () => {\n      // Smaller text should have higher line height for readability\n      expect(fontSizes['2xs'].lineHeight).toBeGreaterThan(fontSizes['9xl'].lineHeight)\n      expect(fontSizes.xs.lineHeight).toBeGreaterThan(fontSizes['8xl'].lineHeight)\n      expect(fontSizes.sm.lineHeight).toBeGreaterThan(fontSizes['7xl'].lineHeight)\n      \n      // Base size should have optimal reading line height (~1.5)\n      expect(fontSizes.base.lineHeight).toBe(1.5)\n      \n      // Large display sizes should have tighter line height\n      expect(fontSizes['7xl'].lineHeight).toBeLessThan(1.3)\n      expect(fontSizes['8xl'].lineHeight).toBeLessThan(1.2)\n      expect(fontSizes['9xl'].lineHeight).toBe(1)\n    })\n\n    test('letter spacing should compensate for size', () => {\n      // Smaller fonts should have positive letter spacing\n      expect(fontSizes['2xs'].letterSpacing).toBe('0.025em')\n      expect(fontSizes.xs.letterSpacing).toBe('0.02em')\n      expect(fontSizes.sm.letterSpacing).toBe('0.01em')\n      \n      // Base size should have neutral spacing\n      expect(fontSizes.base.letterSpacing).toBe('0')\n      \n      // Larger fonts should have negative letter spacing\n      expect(fontSizes.lg.letterSpacing).toBe('-0.01em')\n      expect(fontSizes.xl.letterSpacing).toBe('-0.015em')\n      expect(fontSizes['2xl'].letterSpacing).toBe('-0.02em')\n      \n      // Very large fonts should have more negative spacing\n      expect(fontSizes['7xl'].letterSpacing).toBe('-0.045em')\n      expect(fontSizes['8xl'].letterSpacing).toBe('-0.05em')\n      expect(fontSizes['9xl'].letterSpacing).toBe('-0.055em')\n    })\n  })\n\n  describe('Semantic Typography Styles', () => {\n    test('should have all semantic categories', () => {\n      expect(typography).toHaveProperty('display')\n      expect(typography).toHaveProperty('heading')\n      expect(typography).toHaveProperty('body')\n      expect(typography).toHaveProperty('ui')\n    })\n\n    test('display styles should be appropriate for hero sections', () => {\n      const { display } = typography\n      \n      expect(display).toHaveProperty('hero')\n      expect(display).toHaveProperty('title')\n      expect(display).toHaveProperty('subtitle')\n      \n      // Hero should be largest and boldest\n      expect(display.hero.fontSize).toBe(fontSizes['7xl'].size)\n      expect(display.hero.fontWeight).toBe(fontWeights.black)\n      expect(display.hero.fontFamily).toBe(fontFamilies.display)\n      \n      // Sizes should decrease hierarchically\n      const heroSize = parseInt(display.hero.fontSize)\n      const titleSize = parseInt(display.title.fontSize)\n      const subtitleSize = parseInt(display.subtitle.fontSize)\n      \n      expect(heroSize).toBeGreaterThan(titleSize)\n      expect(titleSize).toBeGreaterThan(subtitleSize)\n    })\n\n    test('heading styles should follow hierarchical sizing', () => {\n      const { heading } = typography\n      const headingLevels: HeadingLevel[] = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']\n      \n      headingLevels.forEach(level => {\n        expect(heading).toHaveProperty(level)\n        expect(heading[level]).toHaveProperty('fontSize')\n        expect(heading[level]).toHaveProperty('fontWeight')\n        expect(heading[level]).toHaveProperty('lineHeight')\n        expect(heading[level]).toHaveProperty('letterSpacing')\n        expect(heading[level]).toHaveProperty('fontFamily')\n      })\n      \n      // Check hierarchical size progression\n      const sizes = headingLevels.map(level => parseInt(heading[level].fontSize))\n      \n      for (let i = 0; i < sizes.length - 1; i++) {\n        expect(sizes[i]).toBeGreaterThan(sizes[i + 1])\n      }\n      \n      // Check specific mappings\n      expect(heading.h1.fontSize).toBe(fontSizes['4xl'].size)\n      expect(heading.h2.fontSize).toBe(fontSizes['3xl'].size)\n      expect(heading.h3.fontSize).toBe(fontSizes['2xl'].size)\n      expect(heading.h4.fontSize).toBe(fontSizes.xl.size)\n      expect(heading.h5.fontSize).toBe(fontSizes.lg.size)\n      expect(heading.h6.fontSize).toBe(fontSizes.base.size)\n    })\n\n    test('body text styles should optimize for readability', () => {\n      const { body } = typography\n      \n      expect(body).toHaveProperty('large')\n      expect(body).toHaveProperty('base')\n      expect(body).toHaveProperty('small')\n      expect(body).toHaveProperty('tiny')\n      \n      // Check size progression\n      const largeSize = parseInt(body.large.fontSize)\n      const baseSize = parseInt(body.base.fontSize)\n      const smallSize = parseInt(body.small.fontSize)\n      const tinySize = parseInt(body.tiny.fontSize)\n      \n      expect(largeSize).toBeGreaterThan(baseSize)\n      expect(baseSize).toBeGreaterThan(smallSize)\n      expect(smallSize).toBeGreaterThan(tinySize)\n      \n      // Check line heights are optimized for reading\n      expect(body.large.lineHeight).toBeGreaterThanOrEqual(1.6)\n      expect(body.base.lineHeight).toBeGreaterThanOrEqual(1.6)\n      expect(body.small.lineHeight).toBeGreaterThanOrEqual(1.5)\n      expect(body.tiny.lineHeight).toBeGreaterThanOrEqual(1.4)\n      \n      // All body text should use regular weight\n      expect(body.large.fontWeight).toBe(fontWeights.regular)\n      expect(body.base.fontWeight).toBe(fontWeights.regular)\n      expect(body.small.fontWeight).toBe(fontWeights.regular)\n      expect(body.tiny.fontWeight).toBe(fontWeights.regular)\n    })\n\n    test('UI text styles should be functional', () => {\n      const { ui } = typography\n      \n      expect(ui).toHaveProperty('label')\n      expect(ui).toHaveProperty('button')\n      expect(ui).toHaveProperty('caption')\n      expect(ui).toHaveProperty('code')\n      \n      // Labels should be medium weight for clarity\n      expect(ui.label.fontWeight).toBe(fontWeights.medium)\n      expect(ui.label.lineHeight).toBe(1.2) // Compact for UI\n      \n      // Buttons should be semibold and compact\n      expect(ui.button.fontWeight).toBe(fontWeights.semibold)\n      expect(ui.button.lineHeight).toBe(1)\n      \n      // Code should use monospace font\n      expect(ui.code.fontFamily).toBe(fontFamilies.mono)\n      \n      // Caption should be smallest UI text\n      const captionSize = parseInt(ui.caption.fontSize)\n      const labelSize = parseInt(ui.label.fontSize)\n      const buttonSize = parseInt(ui.button.fontSize)\n      \n      expect(labelSize).toBeGreaterThanOrEqual(captionSize)\n      expect(buttonSize).toBeGreaterThan(captionSize)\n    })\n  })\n\n  describe('Typography Utility Functions', () => {\n    test('getTypographyStyle should return correct styles', () => {\n      const headingStyle = getTypographyStyle('heading', 'h1')\n      expect(headingStyle.fontSize).toBe(fontSizes['4xl'].size)\n      expect(headingStyle.fontWeight).toBe(fontWeights.bold)\n      \n      const bodyStyle = getTypographyStyle('body', 'base')\n      expect(bodyStyle.fontSize).toBe(fontSizes.base.size)\n      expect(bodyStyle.fontWeight).toBe(fontWeights.regular)\n    })\n\n    test('getTypographyStyle should fallback to body.base', () => {\n      const invalidStyle = getTypographyStyle('invalid', 'style')\n      expect(invalidStyle).toEqual(typography.body.base)\n      \n      const invalidCategory = getTypographyStyle('heading', 'invalid')\n      expect(invalidCategory).toEqual(typography.body.base)\n    })\n\n    test('fluidTypography should calculate responsive scaling', () => {\n      const fluidSize = fluidTypography(16, 32, 320, 1920)\n      \n      expect(fluidSize).toContain('clamp(')\n      expect(fluidSize).toContain('16px')\n      expect(fluidSize).toContain('32px')\n      expect(fluidSize).toContain('vw')\n      \n      // Should be a valid CSS clamp function\n      expect(fluidSize).toMatch(/^clamp\\(.+px,\\s*.+px\\s*\\+\\s*.+vw,\\s*.+px\\)$/)\n    })\n\n    test('fluidTypography should handle edge cases', () => {\n      // Same min and max should clamp to that value\n      const staticSize = fluidTypography(16, 16)\n      expect(staticSize).toContain('16px')\n      \n      // Very small viewport range\n      const smallRange = fluidTypography(14, 18, 320, 480)\n      expect(smallRange).toContain('clamp(')\n    })\n\n    test('generateTypographyVars should create CSS custom properties', () => {\n      const vars = generateTypographyVars()\n      \n      // Font families\n      expect(vars).toHaveProperty('--ds-type-family-sans')\n      expect(vars).toHaveProperty('--ds-type-family-display')\n      expect(vars).toHaveProperty('--ds-type-family-mono')\n      \n      // Font weights\n      expect(vars).toHaveProperty('--ds-type-weight-regular', '400')\n      expect(vars).toHaveProperty('--ds-type-weight-bold', '700')\n      \n      // Font sizes\n      expect(vars).toHaveProperty('--ds-type-size-base', '16px')\n      expect(vars).toHaveProperty('--ds-type-leading-base', '1.5')\n      expect(vars).toHaveProperty('--ds-type-tracking-base', '0')\n      \n      // Count should be substantial\n      const varCount = Object.keys(vars).length\n      expect(varCount).toBeGreaterThan(50)\n    })\n\n    test('generateTypographyVars should accept custom prefix', () => {\n      const vars = generateTypographyVars('--custom')\n      \n      expect(vars).toHaveProperty('--custom-family-sans')\n      expect(vars).toHaveProperty('--custom-weight-regular', '400')\n      expect(vars).toHaveProperty('--custom-size-base', '16px')\n    })\n  })\n\n  describe('Text Truncation Utilities', () => {\n    test('should provide single line truncation', () => {\n      expect(textTruncation.singleLine).toEqual({\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      })\n    })\n\n    test('should provide multi-line truncation', () => {\n      const twoLineClamp = textTruncation.multiLine(2)\n      \n      expect(twoLineClamp).toEqual({\n        display: '-webkit-box',\n        WebkitLineClamp: 2,\n        WebkitBoxOrient: 'vertical',\n        overflow: 'hidden',\n      })\n      \n      const fiveLineClamp = textTruncation.multiLine(5)\n      expect(fiveLineClamp.WebkitLineClamp).toBe(5)\n    })\n  })\n\n  describe('Performance and Accessibility', () => {\n    test('typography objects should be frozen/immutable', () => {\n      expect(Object.isFrozen(fontFamilies)).toBe(true)\n      expect(Object.isFrozen(fontWeights)).toBe(true)\n      expect(Object.isFrozen(fontSizes)).toBe(true)\n      expect(Object.isFrozen(typography)).toBe(true)\n    })\n\n    test('font sizes should be accessible (minimum 12px for body text)', () => {\n      // Check that body text is at least 12px\n      const bodySmall = parseInt(typography.body.small.fontSize)\n      const bodyTiny = parseInt(typography.body.tiny.fontSize)\n      \n      expect(bodySmall).toBeGreaterThanOrEqual(14) // 14px\n      expect(bodyTiny).toBeGreaterThanOrEqual(12)  // 12px\n      \n      // UI elements can be smaller but should be reasonable\n      const captionSize = parseInt(typography.ui.caption.fontSize)\n      expect(captionSize).toBeGreaterThanOrEqual(12)\n    })\n\n    test('line heights should support readability', () => {\n      // Body text should have line heights >= 1.4 for accessibility\n      expect(typography.body.large.lineHeight).toBeGreaterThanOrEqual(1.6)\n      expect(typography.body.base.lineHeight).toBeGreaterThanOrEqual(1.6)\n      expect(typography.body.small.lineHeight).toBeGreaterThanOrEqual(1.5)\n      expect(typography.body.tiny.lineHeight).toBeGreaterThanOrEqual(1.4)\n      \n      // Even small UI text should be readable\n      expect(typography.ui.caption.lineHeight).toBeGreaterThanOrEqual(1.4)\n    })\n\n    test('typography functions should be performant', () => {\n      const startTime = performance.now()\n      \n      for (let i = 0; i < 1000; i++) {\n        getTypographyStyle('heading', 'h1')\n        fluidTypography(16, 24)\n        generateTypographyVars()\n      }\n      \n      const endTime = performance.now()\n      const duration = endTime - startTime\n      \n      // Should complete 3000 calls in under 100ms\n      expect(duration).toBeLessThan(100)\n    })\n  })\n\n  describe('Mathematical Relationships', () => {\n    test('should maintain consistent scaling ratios', () => {\n      // Test Perfect Fourth ratio (1.333) in some key sizes\n      const baseSize = parseInt(fontSizes.base.size)      // 16px\n      const xlSize = parseInt(fontSizes.xl.size)          // 20px\n      const xl2Size = parseInt(fontSizes['2xl'].size)     // 24px\n      \n      // Check approximate ratios (allowing for rounding)\n      const ratio1 = xlSize / baseSize        // 20/16 = 1.25\n      const ratio2 = xl2Size / xlSize         // 24/20 = 1.2\n      \n      expect(ratio1).toBeCloseTo(1.25, 1)\n      expect(ratio2).toBeCloseTo(1.2, 1)\n    })\n\n    test('should have harmonious size relationships', () => {\n      // Check that heading sizes create good hierarchy\n      const h1Size = parseInt(typography.heading.h1.fontSize)    // 36px\n      const h2Size = parseInt(typography.heading.h2.fontSize)    // 30px\n      const h3Size = parseInt(typography.heading.h3.fontSize)    // 24px\n      \n      const ratio1 = h1Size / h2Size  // 36/30 = 1.2\n      const ratio2 = h2Size / h3Size  // 30/24 = 1.25\n      \n      // Ratios should be consistent and harmonious\n      expect(ratio1).toBeCloseTo(1.2, 1)\n      expect(ratio2).toBeCloseTo(1.25, 1)\n    })\n  })\n\n  describe('Type Safety', () => {\n    test('typography types should be properly defined', () => {\n      const family: FontFamily = 'sans'\n      expect(fontFamilies[family]).toBeDefined()\n      \n      const weight: FontWeight = 'bold'\n      expect(fontWeights[weight]).toBe(700)\n      \n      const size: FontSize = 'base'\n      expect(fontSizes[size].size).toBe('16px')\n      \n      const category: TypographyCategory = 'heading'\n      expect(typography[category]).toBeDefined()\n      \n      const headingLevel: HeadingLevel = 'h1'\n      expect(typography.heading[headingLevel]).toBeDefined()\n    })\n\n    test('should prevent invalid typography values at compile time', () => {\n      // These would fail TypeScript compilation if uncommented\n      // @ts-expect-error\n      const invalidFamily: FontFamily = 'invalid'\n      \n      // @ts-expect-error\n      const invalidWeight: FontWeight = 'invalid'\n      \n      // @ts-expect-error\n      const invalidSize: FontSize = 'invalid'\n    })\n  })\n})"],"names":["describe","test","expect","BASE_FONT_SIZE","toBe","fontFamilies","sans","toContain","display","mono","expectedWeights","forEach","weight","fontWeights","toHaveProperty","thin","regular","bold","black","weights","Object","values","i","length","toBeGreaterThan","toBeGreaterThanOrEqual","toBeLessThanOrEqual","expectedSizes","size","fontSizes","fontSize","toMatch","lineHeight","letterSpacing","sizes","entries","map","key","value","numericValue","parseInt","replace","sort","a","b","xs","sm","base","lg","xl","toBeLessThan","typography","hero","fontWeight","fontFamily","heroSize","titleSize","title","subtitleSize","subtitle","heading","headingLevels","level","h1","h2","h3","h4","h5","h6","body","largeSize","large","baseSize","smallSize","small","tinySize","tiny","ui","label","medium","button","semibold","code","captionSize","caption","labelSize","buttonSize","headingStyle","getTypographyStyle","bodyStyle","invalidStyle","toEqual","invalidCategory","fluidSize","fluidTypography","staticSize","smallRange","vars","generateTypographyVars","varCount","keys","textTruncation","singleLine","overflow","textOverflow","whiteSpace","twoLineClamp","multiLine","WebkitLineClamp","WebkitBoxOrient","fiveLineClamp","isFrozen","bodySmall","bodyTiny","startTime","performance","now","endTime","duration","xlSize","xl2Size","ratio1","ratio2","toBeCloseTo","h1Size","h2Size","h3Size","family","toBeDefined","category","headingLevel","invalidFamily","invalidWeight","invalidSize"],"mappings":"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"}