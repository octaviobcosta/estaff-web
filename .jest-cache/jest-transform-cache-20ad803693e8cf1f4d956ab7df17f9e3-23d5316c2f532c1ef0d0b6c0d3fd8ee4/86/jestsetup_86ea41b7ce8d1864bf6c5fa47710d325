07a8d6717b1ccc12715b4b690224d9d2
"use strict";
// Mock Next.js router
jest.mock("next/router", ()=>({
        useRouter () {
            return {
                route: "/",
                pathname: "/",
                query: {},
                asPath: "/",
                push: jest.fn(),
                pop: jest.fn(),
                reload: jest.fn(),
                back: jest.fn(),
                prefetch: jest.fn().mockResolvedValue(undefined),
                beforePopState: jest.fn(),
                events: {
                    on: jest.fn(),
                    off: jest.fn(),
                    emit: jest.fn()
                }
            };
        }
    }));
// Mock Next.js navigation (App Router)
jest.mock("next/navigation", ()=>({
        useRouter () {
            return {
                push: jest.fn(),
                replace: jest.fn(),
                refresh: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                prefetch: jest.fn()
            };
        },
        useSearchParams () {
            return new URLSearchParams();
        },
        usePathname () {
            return "/";
        }
    }));
// Mock Framer Motion to avoid animation issues in tests
jest.mock("framer-motion", ()=>({
        motion: {
            div: "div",
            span: "span",
            p: "p",
            h1: "h1",
            h2: "h2",
            h3: "h3",
            button: "button",
            section: "section",
            article: "article",
            header: "header",
            footer: "footer",
            nav: "nav"
        },
        AnimatePresence: ({ children })=>children,
        useAnimation: ()=>({
                start: jest.fn(),
                stop: jest.fn(),
                set: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
// Mock IntersectionObserver
global.IntersectionObserver = jest.fn(()=>({
        observe: jest.fn(),
        disconnect: jest.fn(),
        unobserve: jest.fn()
    }));
// Mock ResizeObserver
global.ResizeObserver = jest.fn(()=>({
        observe: jest.fn(),
        disconnect: jest.fn(),
        unobserve: jest.fn()
    }));
// Mock window.matchMedia
Object.defineProperty(window, "matchMedia", {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock getComputedStyle for performance tests
global.getComputedStyle = jest.fn(()=>({
        getPropertyValue: jest.fn(()=>"")
    }));
// Performance measurement globals
global.performance = global.performance || {
    now: jest.fn(()=>Date.now()),
    mark: jest.fn(),
    measure: jest.fn(),
    getEntriesByName: jest.fn(()=>[]),
    getEntriesByType: jest.fn(()=>[])
};
// Mock console methods to reduce noise in tests
const originalError = console.error;
const originalWarn = console.warn;
beforeAll(()=>{
    console.error = (...args)=>{
        // Suppress known warnings/errors that are expected in tests
        if (args[0]?.includes?.("Warning: ReactDOM.render is no longer supported") || args[0]?.includes?.("Warning: Each child in a list should have a unique") || args[0]?.includes?.("Color token not found")) {
            return;
        }
        originalError.call(console, ...args);
    };
    console.warn = (...args)=>{
        // Suppress known warnings
        if (args[0]?.includes?.("Color token not found")) {
            return;
        }
        originalWarn.call(console, ...args);
    };
});
afterAll(()=>{
    console.error = originalError;
    console.warn = originalWarn;
});
// Global test utilities
global.testUtils = {
    // Mock animation frame for performance tests
    mockAnimationFrame: ()=>{
        let callbacks = [];
        global.requestAnimationFrame = jest.fn((cb)=>{
            callbacks.push(cb);
            return callbacks.length;
        });
        global.cancelAnimationFrame = jest.fn((id)=>{
            callbacks = callbacks.filter((_, index)=>index + 1 !== id);
        });
        return {
            tick: ()=>callbacks.forEach((cb)=>cb(performance.now())),
            clear: ()=>{
                callbacks = [];
            }
        };
    },
    // Accessibility testing helper
    toBeAccessible: async (element)=>{
        const { toHaveNoViolations } = require("jest-axe");
        expect.extend(toHaveNoViolations);
        const axe = require("axe-core");
        const results = await axe.run(element);
        expect(results).toHaveNoViolations();
    }
};

//# sourceMappingURL=data:application/json;base64,