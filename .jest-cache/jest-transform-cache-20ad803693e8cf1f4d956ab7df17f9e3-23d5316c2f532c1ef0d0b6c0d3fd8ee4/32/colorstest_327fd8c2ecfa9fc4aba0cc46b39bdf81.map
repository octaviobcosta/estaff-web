{"version":3,"sources":["/mnt/c/Users/octav/Projetos/estaff-web/tests/unit/design-tokens/colors.test.ts"],"sourcesContent":["/**\n * Unit Tests for Design System Color Tokens\n * Tests WCAG AAA compliance, contrast ratios, and mathematical progression\n */\n\nimport { \n  colors, \n  getColor, \n  generateColorVars, \n  getContrastRatio, \n  getAccessiblePair,\n  type ColorToken \n} from '@/lib/design-system/tokens/colors'\n\n// Test utilities for color analysis\ninterface WCAGLevel {\n  AA: number\n  AAA: number\n}\n\nconst WCAG_CONTRAST_RATIOS: Record<string, WCAGLevel> = {\n  normal: { AA: 4.5, AAA: 7.0 },\n  large: { AA: 3.0, AAA: 4.5 }\n}\n\n/**\n * Calculate actual contrast ratio between two hex colors\n * Implementation of WCAG contrast ratio formula\n */\nfunction calculateContrastRatio(color1: string, color2: string): number {\n  const getLuminance = (hex: string): number => {\n    // Remove # if present\n    const color = hex.replace('#', '')\n    \n    // Convert to RGB\n    const r = parseInt(color.substr(0, 2), 16) / 255\n    const g = parseInt(color.substr(2, 2), 16) / 255\n    const b = parseInt(color.substr(4, 2), 16) / 255\n    \n    // Apply gamma correction\n    const toLinear = (val: number) => \n      val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4)\n    \n    const rLinear = toLinear(r)\n    const gLinear = toLinear(g)\n    const bLinear = toLinear(b)\n    \n    // Calculate relative luminance\n    return 0.2126 * rLinear + 0.7152 * gLinear + 0.0722 * bLinear\n  }\n  \n  const lum1 = getLuminance(color1)\n  const lum2 = getLuminance(color2)\n  const lighter = Math.max(lum1, lum2)\n  const darker = Math.min(lum1, lum2)\n  \n  return (lighter + 0.05) / (darker + 0.05)\n}\n\n/**\n * Validate color format and accessibility\n */\nfunction validateColor(colorValue: string, name: string) {\n  // Check hex format\n  expect(colorValue).toMatch(/^#[0-9a-fA-F]{6}$/)\n  \n  // Check if it's a valid hex color\n  const isValidHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(colorValue)\n  expect(isValidHex).toBe(true)\n}\n\ndescribe('Design System Color Tokens', () => {\n  describe('Color Structure and Format', () => {\n    test('should have all required color categories', () => {\n      expect(colors).toHaveProperty('brand')\n      expect(colors).toHaveProperty('gray')\n      expect(colors).toHaveProperty('semantic')\n      expect(colors).toHaveProperty('accent')\n      expect(colors).toHaveProperty('glass')\n    })\n\n    test('should have all brand colors', () => {\n      expect(colors.brand).toHaveProperty('freela')\n      expect(colors.brand).toHaveProperty('empresa')\n      expect(colors.brand).toHaveProperty('institucional')\n    })\n\n    test('all color values should be valid hex colors', () => {\n      const validateColorObject = (obj: any, path = '') => {\n        for (const [key, value] of Object.entries(obj)) {\n          const currentPath = path ? `${path}.${key}` : key\n          \n          if (typeof value === 'string' && value.startsWith('#')) {\n            validateColor(value, currentPath)\n          } else if (typeof value === 'object' && value !== null) {\n            validateColorObject(value, currentPath)\n          }\n        }\n      }\n      \n      validateColorObject(colors)\n    })\n\n    test('brand colors should have complete shade ranges', () => {\n      const expectedShades = ['50', '100', '200', '300', '400', '500', '600', '700', '800', '900', '950']\n      \n      Object.entries(colors.brand).forEach(([brandName, brandColors]) => {\n        expectedShades.forEach(shade => {\n          expect(brandColors).toHaveProperty(shade)\n          validateColor(brandColors[shade as keyof typeof brandColors], `brand.${brandName}.${shade}`)\n        })\n      })\n    })\n\n    test('gray scale should have all required shades', () => {\n      const expectedGrayShades = ['0', '25', '50', '100', '200', '300', '400', '500', '600', '700', '800', '900', '950', '1000']\n      \n      expectedGrayShades.forEach(shade => {\n        expect(colors.gray).toHaveProperty(shade)\n        validateColor(colors.gray[shade as keyof typeof colors.gray], `gray.${shade}`)\n      })\n    })\n  })\n\n  describe('WCAG Contrast Ratio Compliance', () => {\n    test('semantic colors should meet WCAG AAA contrast requirements', () => {\n      Object.entries(colors.semantic).forEach(([colorName, colorObj]) => {\n        const backgroundColors = [colorObj.light, colorObj.DEFAULT, colorObj.dark]\n        const textColor = colorObj.contrast\n        \n        backgroundColors.forEach((bgColor, index) => {\n          const contrastRatio = calculateContrastRatio(bgColor, textColor)\n          const colorVariant = index === 0 ? 'light' : index === 1 ? 'default' : 'dark'\n          \n          expect(contrastRatio).toBeGreaterThanOrEqual(WCAG_CONTRAST_RATIOS.normal.AAA)\n          \n          // Log actual ratios for verification\n          console.log(`${colorName}.${colorVariant} contrast ratio: ${contrastRatio.toFixed(2)}:1`)\n        })\n      })\n    })\n\n    test('brand primary colors should have sufficient contrast with white/black', () => {\n      const brandPrimaries = {\n        'freela.500': colors.brand.freela['500'],\n        'empresa.900': colors.brand.empresa['900'],\n        'institucional.300': colors.brand.institucional['300']\n      }\n      \n      Object.entries(brandPrimaries).forEach(([name, color]) => {\n        const whiteContrast = calculateContrastRatio(color, colors.gray['0'])\n        const blackContrast = calculateContrastRatio(color, colors.gray['1000'])\n        \n        // At least one should meet AA standards\n        const meetsStandards = whiteContrast >= WCAG_CONTRAST_RATIOS.normal.AA || \n                              blackContrast >= WCAG_CONTRAST_RATIOS.normal.AA\n        \n        expect(meetsStandards).toBe(true)\n        \n        console.log(`${name} - White: ${whiteContrast.toFixed(2)}:1, Black: ${blackContrast.toFixed(2)}:1`)\n      })\n    })\n\n    test('gray scale should have proper contrast progression', () => {\n      // Test adjacent gray shades have sufficient contrast\n      const grayShades = ['0', '100', '200', '300', '400', '500', '600', '700', '800', '900', '1000']\n      \n      for (let i = 0; i < grayShades.length - 2; i++) {\n        const lightShade = colors.gray[grayShades[i] as keyof typeof colors.gray]\n        const darkShade = colors.gray[grayShades[i + 2] as keyof typeof colors.gray]\n        \n        const contrastRatio = calculateContrastRatio(lightShade, darkShade)\n        expect(contrastRatio).toBeGreaterThanOrEqual(3.0) // Minimum for visual distinction\n      }\n    })\n  })\n\n  describe('Mathematical Color Progression', () => {\n    test('brand colors should follow mathematical progression in luminance', () => {\n      Object.entries(colors.brand).forEach(([brandName, brandColors]) => {\n        const shades = ['50', '100', '200', '300', '400', '500', '600', '700', '800', '900', '950']\n        const luminanceValues: number[] = []\n        \n        shades.forEach(shade => {\n          const color = brandColors[shade as keyof typeof brandColors]\n          const luminance = calculateContrastRatio(color, '#000000') - 1\n          luminanceValues.push(luminance)\n        })\n        \n        // Check that luminance decreases as shade numbers increase\n        for (let i = 0; i < luminanceValues.length - 1; i++) {\n          expect(luminanceValues[i]).toBeGreaterThan(luminanceValues[i + 1])\n        }\n      })\n    })\n\n    test('color temperature should be consistent within brand families', () => {\n      // This would test color temperature consistency\n      // For now, we'll test that colors maintain their hue family\n      Object.entries(colors.brand).forEach(([brandName, brandColors]) => {\n        const primaryColor = brandColors['500']\n        const lighterShades = [brandColors['100'], brandColors['200'], brandColors['300']]\n        const darkerShades = [brandColors['700'], brandColors['800'], brandColors['900']]\n        \n        // Test that all shades are recognizably the same hue family\n        // This is a simplified test - in production you'd analyze HSL values\n        expect(typeof primaryColor).toBe('string')\n        expect(primaryColor).toMatch(/^#[0-9a-fA-F]{6}$/)\n        \n        const allShades = lighterShades.concat(darkerShades)\n        allShades.forEach(shade => {\n          expect(shade).toMatch(/^#[0-9a-fA-F]{6}$/)\n        })\n      })\n    })\n  })\n\n  describe('Color Utility Functions', () => {\n    test('getColor should return correct colors', () => {\n      expect(getColor('brand.freela.500')).toBe('#ec4464')\n      expect(getColor('brand.empresa.900')).toBe('#142444')\n      expect(getColor('brand.institucional.300')).toBe('#ecd4a4')\n      expect(getColor('gray.0')).toBe('#ffffff')\n      expect(getColor('gray.1000')).toBe('#000000')\n    })\n\n    test('getColor should handle invalid paths gracefully', () => {\n      // Mock console.warn to verify warning is logged\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {})\n      \n      expect(getColor('invalid.path')).toBe('#000000')\n      expect(getColor('brand.nonexistent.500')).toBe('#000000')\n      \n      expect(consoleSpy).toHaveBeenCalledWith('Color token not found: invalid.path')\n      consoleSpy.mockRestore()\n    })\n\n    test('generateColorVars should create CSS custom properties', () => {\n      const vars = generateColorVars()\n      \n      expect(vars).toHaveProperty('--ds-brand-freela-500', '#ec4464')\n      expect(vars).toHaveProperty('--ds-brand-empresa-900', '#142444')\n      expect(vars).toHaveProperty('--ds-gray-0', '#ffffff')\n      \n      // Count total variables\n      const varCount = Object.keys(vars).length\n      expect(varCount).toBeGreaterThan(50) // Should have many color variables\n    })\n\n    test('generateColorVars should accept custom prefix', () => {\n      const vars = generateColorVars('--custom')\n      \n      expect(vars).toHaveProperty('--custom-brand-freela-500', '#ec4464')\n      expect(vars).toHaveProperty('--custom-gray-0', '#ffffff')\n    })\n\n    test('getAccessiblePair should return high contrast combinations', () => {\n      const result = getAccessiblePair(colors.brand.freela['500'])\n      \n      expect(result).toHaveProperty('background')\n      expect(result).toHaveProperty('foreground')\n      expect(result).toHaveProperty('ratio')\n      \n      expect(result.background).toBe(colors.brand.freela['500'])\n      expect([colors.gray['0'], colors.gray['900']]).toContain(result.foreground)\n      expect(result.ratio).toBeGreaterThanOrEqual(4.5)\n    })\n  })\n\n  describe('Glass Morphism Colors', () => {\n    test('should have proper alpha channel values', () => {\n      expect(colors.glass.background).toMatch(/rgba\\(\\d+, \\d+, \\d+, 0\\.\\d+\\)/)\n      expect(colors.glass.backgroundHover).toMatch(/rgba\\(\\d+, \\d+, \\d+, 0\\.\\d+\\)/)\n      expect(colors.glass.border).toMatch(/rgba\\(\\d+, \\d+, \\d+, 0\\.\\d+\\)/)\n      expect(colors.glass.borderHover).toMatch(/rgba\\(\\d+, \\d+, \\d+, 0\\.\\d+\\)/)\n      expect(colors.glass.text).toMatch(/rgba\\(\\d+, \\d+, \\d+, 0\\.\\d+\\)/)\n      expect(colors.glass.backdrop).toMatch(/rgba\\(\\d+, \\d+, \\d+, 0\\.\\d+\\)/)\n    })\n\n    test('hover states should have higher opacity than default states', () => {\n      const backgroundOpacity = parseFloat(colors.glass.background.match(/0\\.\\d+/)?.[0] || '0')\n      const backgroundHoverOpacity = parseFloat(colors.glass.backgroundHover.match(/0\\.\\d+/)?.[0] || '0')\n      \n      const borderOpacity = parseFloat(colors.glass.border.match(/0\\.\\d+/)?.[0] || '0')\n      const borderHoverOpacity = parseFloat(colors.glass.borderHover.match(/0\\.\\d+/)?.[0] || '0')\n      \n      expect(backgroundHoverOpacity).toBeGreaterThan(backgroundOpacity)\n      expect(borderHoverOpacity).toBeGreaterThan(borderOpacity)\n    })\n  })\n\n  describe('Performance and Memory', () => {\n    test('color objects should be frozen/immutable', () => {\n      expect(Object.isFrozen(colors)).toBe(true)\n    })\n\n    test('getColor function should be performant', () => {\n      const startTime = performance.now()\n      \n      for (let i = 0; i < 1000; i++) {\n        getColor('brand.freela.500')\n        getColor('gray.900')\n        getColor('semantic.success.DEFAULT')\n      }\n      \n      const endTime = performance.now()\n      const duration = endTime - startTime\n      \n      // Should complete 3000 calls in under 50ms\n      expect(duration).toBeLessThan(50)\n    })\n\n    test('generateColorVars should cache results', () => {\n      const startTime = performance.now()\n      const vars1 = generateColorVars()\n      const midTime = performance.now()\n      const vars2 = generateColorVars()\n      const endTime = performance.now()\n      \n      const firstCallTime = midTime - startTime\n      const secondCallTime = endTime - midTime\n      \n      // Results should be identical\n      expect(vars1).toEqual(vars2)\n      \n      // Second call should be much faster (assuming caching)\n      // This test might need adjustment based on actual caching implementation\n      expect(secondCallTime).toBeLessThanOrEqual(firstCallTime)\n    })\n  })\n\n  describe('Type Safety', () => {\n    test('color token types should be properly defined', () => {\n      const colorToken: ColorToken = colors\n      expect(colorToken).toBeDefined()\n      \n      // Test that TypeScript compilation would catch invalid access\n      // @ts-expect-error - This should fail TypeScript compilation\n      const invalid = colors.nonexistent\n    })\n  })\n})"],"names":["WCAG_CONTRAST_RATIOS","normal","AA","AAA","large","calculateContrastRatio","color1","color2","getLuminance","hex","color","replace","r","parseInt","substr","g","b","toLinear","val","Math","pow","rLinear","gLinear","bLinear","lum1","lum2","lighter","max","darker","min","validateColor","colorValue","name","expect","toMatch","isValidHex","test","toBe","describe","colors","toHaveProperty","brand","validateColorObject","obj","path","key","value","Object","entries","currentPath","startsWith","expectedShades","forEach","brandName","brandColors","shade","expectedGrayShades","gray","semantic","colorName","colorObj","backgroundColors","light","DEFAULT","dark","textColor","contrast","bgColor","index","contrastRatio","colorVariant","toBeGreaterThanOrEqual","console","log","toFixed","brandPrimaries","freela","empresa","institucional","whiteContrast","blackContrast","meetsStandards","grayShades","i","length","lightShade","darkShade","shades","luminanceValues","luminance","push","toBeGreaterThan","primaryColor","lighterShades","darkerShades","allShades","concat","getColor","consoleSpy","jest","spyOn","mockImplementation","toHaveBeenCalledWith","mockRestore","vars","generateColorVars","varCount","keys","result","getAccessiblePair","background","toContain","foreground","ratio","glass","backgroundHover","border","borderHover","text","backdrop","backgroundOpacity","parseFloat","match","backgroundHoverOpacity","borderOpacity","borderHoverOpacity","isFrozen","startTime","performance","now","endTime","duration","toBeLessThan","vars1","midTime","vars2","firstCallTime","secondCallTime","toEqual","toBeLessThanOrEqual","colorToken","toBeDefined","invalid","nonexistent"],"mappings":"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"}