621ca14f163de1321a264f8e9f4a171f
/**
 * Design System Spacing Tokens
 * 8px base grid system with mathematical progression
 */ // Base unit for all spacing calculations
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    BASE_UNIT: function() {
        return BASE_UNIT;
    },
    aspectRatios: function() {
        return aspectRatios;
    },
    breakpoints: function() {
        return breakpoints;
    },
    containers: function() {
        return containers;
    },
    generateSpacingVars: function() {
        return generateSpacingVars;
    },
    getSemanticSpacing: function() {
        return getSemanticSpacing;
    },
    getSpacing: function() {
        return getSpacing;
    },
    responsiveSpacing: function() {
        return responsiveSpacing;
    },
    semanticSpacing: function() {
        return semanticSpacing;
    },
    spacing: function() {
        return spacing;
    },
    zIndex: function() {
        return zIndex;
    }
});
const BASE_UNIT = 8;
const spacing = {
    px: "1px",
    0: "0px",
    0.5: `${BASE_UNIT * 0.25}px`,
    1: `${BASE_UNIT * 0.5}px`,
    2: `${BASE_UNIT * 1}px`,
    3: `${BASE_UNIT * 1.5}px`,
    4: `${BASE_UNIT * 2}px`,
    5: `${BASE_UNIT * 2.5}px`,
    6: `${BASE_UNIT * 3}px`,
    7: `${BASE_UNIT * 3.5}px`,
    8: `${BASE_UNIT * 4}px`,
    9: `${BASE_UNIT * 4.5}px`,
    10: `${BASE_UNIT * 5}px`,
    11: `${BASE_UNIT * 5.5}px`,
    12: `${BASE_UNIT * 6}px`,
    14: `${BASE_UNIT * 7}px`,
    16: `${BASE_UNIT * 8}px`,
    18: `${BASE_UNIT * 9}px`,
    20: `${BASE_UNIT * 10}px`,
    24: `${BASE_UNIT * 12}px`,
    28: `${BASE_UNIT * 14}px`,
    32: `${BASE_UNIT * 16}px`,
    36: `${BASE_UNIT * 18}px`,
    40: `${BASE_UNIT * 20}px`,
    48: `${BASE_UNIT * 24}px`,
    56: `${BASE_UNIT * 28}px`,
    64: `${BASE_UNIT * 32}px`,
    72: `${BASE_UNIT * 36}px`,
    80: `${BASE_UNIT * 40}px`,
    96: `${BASE_UNIT * 48}px`
};
const semanticSpacing = {
    // Component padding
    component: {
        xs: spacing[2],
        sm: spacing[3],
        md: spacing[4],
        lg: spacing[6],
        xl: spacing[8]
    },
    // Layout spacing
    layout: {
        section: spacing[20],
        container: spacing[16],
        grid: spacing[6],
        stack: spacing[4]
    },
    // Content spacing
    content: {
        paragraph: spacing[6],
        heading: spacing[8],
        list: spacing[4],
        inline: spacing[2]
    },
    // Form spacing
    form: {
        field: spacing[6],
        group: spacing[8],
        label: spacing[2],
        help: spacing[1]
    }
};
const containers = {
    xs: "320px",
    sm: "640px",
    md: "768px",
    lg: "1024px",
    xl: "1280px",
    "2xl": "1536px",
    "3xl": "1920px",
    full: "100%",
    prose: "65ch"
};
const breakpoints = {
    xs: 320,
    sm: 640,
    md: 768,
    lg: 1024,
    xl: 1280,
    "2xl": 1536
};
const zIndex = {
    hide: -1,
    base: 0,
    dropdown: 10,
    sticky: 20,
    overlay: 30,
    modal: 40,
    popover: 50,
    tooltip: 60,
    notification: 70,
    top: 9999
};
const aspectRatios = {
    square: "1 / 1",
    video: "16 / 9",
    portrait: "3 / 4",
    landscape: "4 / 3",
    wide: "21 / 9",
    golden: "1.618 / 1"
};
function getSpacing(value) {
    return spacing[value];
}
function getSemanticSpacing(category, size) {
    const categorySpacing = semanticSpacing[category];
    return categorySpacing[size] || spacing[4];
}
function responsiveSpacing(base, scale = 1.5) {
    const baseValue = parseInt(spacing[base]);
    return {
        mobile: `${baseValue}px`,
        tablet: `${Math.round(baseValue * 1.25)}px`,
        desktop: `${Math.round(baseValue * scale)}px`
    };
}
function generateSpacingVars(prefix = "--ds-spacing") {
    const vars = {};
    for (const [key, value] of Object.entries(spacing)){
        vars[`${prefix}-${key}`] = value;
    }
    return vars;
}

//# sourceMappingURL=data:application/json;base64,